<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.5.2">Jekyll</generator><link href="http://localhost:4000/atom.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2018-09-20T01:38:31-04:00</updated><id>http://localhost:4000/</id><title type="html">Random Notes</title><subtitle> </subtitle><author><name>Shiki</name></author><entry><title type="html">LambdaMART Derivation</title><link href="http://localhost:4000/2018/09/01/LambdaMART-Derivation/" rel="alternate" type="text/html" title="LambdaMART Derivation" /><published>2018-09-01T00:00:00-04:00</published><updated>2018-09-01T00:00:00-04:00</updated><id>http://localhost:4000/2018/09/01/LambdaMART-Derivation</id><content type="html" xml:base="http://localhost:4000/2018/09/01/LambdaMART-Derivation/">&lt;p&gt;Last time we talked about the general workflow of learning to rank and how to implement LambdaMART in python. This time, we will go through the derivations of LambdaMART.&lt;/p&gt;

&lt;h2 id=&quot;ranknet&quot;&gt;RankNet&lt;/h2&gt;

&lt;p&gt;RankNet maps an input feature vector $x\in \mathbb{R}^N$ to a number $f(x)$. For each pair of documents with different labels $d_i$ and $d_j$, we can obtain a score $s_i=f(x_i)$ and $s_j=f(x_j)$. Let $d_i\rhd d_j$ denotes the event that $d_i$ is ranked above $d_j$. We can map the scores $s_i$ and $s_j$ to a learned probability model such that $d_i$ should be ranked higher than $d_j$:
&lt;script type=&quot;math/tex&quot;&gt;\newcommand{\pder}[2][]{\frac{\partial#1}{\partial#2}}
\newcommand{\eqdef}{=\mathrel{\mathop:}}
\newcommand{\defeq}{\mathrel{\mathop:}=}
\DeclareMathOperator*{\argmin}{arg\,min}
P_{ij}=\mathbb{P}(d_i\rhd d_j)=\frac{1}{1+e^{-\sigma (s_i-s_j)}}&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;We define the cost function using cross entropy&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;C = -\bar{P_{ij}}logP_{ij}-(1-\bar{P_{ij}})log(1-P_{ij})&lt;/script&gt;

&lt;p&gt;where $\bar{P_{ij}}$ is the known probability that $d_i\rhd d_j$.&lt;/p&gt;

&lt;p&gt;Let $S_{ij}\in \{0, \pm 1\} $ be 1 if $d_i\rhd d_j$, -1 if $d_j\rhd d_i$, and 0 if $d_i$ and $d_j$ have the same rank. For simplicity, we assume that the ranking is deterministic known from labelled data. Thus, we have $\bar{P_{ij}}=\frac{1}{2}(1+S_{ij})$. Re-write the cost function, we have&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;C = \frac{1}{2}(1-S_{ij})\sigma(s_i-s_j)+log(1+e^{-\sigma(s_i-s_j)})&lt;/script&gt;

&lt;p&gt;To update the weights of the model, we have the familiar gradient descent formula&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;w_k \rightarrow w_k - \eta\pder[C]{w_k}&lt;/script&gt;

&lt;p&gt;where&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\pder[C]{w_k} = \pder[C]{s_i}\pder[s_i]{w_k}+\pder[C]{s_j}\pder[s_j]{w_k}   \tag{1}&lt;/script&gt;

&lt;p&gt;Note that&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\pder[C]{s_i}=\sigma\Big[\frac{1}{2}(1-S_{ij})-\frac{1}{1+e^{\sigma(s_i-s_j)}}\Big]=-\pder[C]{s_j}  \tag{2}&lt;/script&gt;

&lt;p&gt;Now, we sub Eq.(2) into Eq.(1), we can factorize the cost function to the following form:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{aligned}
    \pder[C]{w_k}&amp;=\pder[C]{s_i}\pder[s_i]{w_k}+\pder[C]{s_j}\pder[s_j]{w_k} \\
        &amp;=\sigma\Big[\frac{1}{2}(1-S_{ij})-\frac{1}{1+e^{\sigma(s_i-s_j)}}\Big]\Big(\pder[s_i]{w_k}-\pder[s_j]{w_k}\Big) \\
        &amp;=\lambda_{ij}\Big(\pder[s_i]{w_k}-\pder[s_j]{w_k}\Big)
\end{aligned} %]]&gt;&lt;/script&gt;

&lt;p&gt;where 
&lt;script type=&quot;math/tex&quot;&gt;\lambda_{ij}\defeq\pder[C]{s_i}=\sigma\Big[\frac{1}{2}(1-S_{ij})-\frac{1}{1+e^{\sigma(s_i-s_j)}}\Big]=-\pder[C]{s_j}    \tag{3}&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;This approach works well if the cost function is differentiable with respect to $s_i$. However, most evaluation metrics in information retrieval such as NDCG are discontinuous as many of them need to sort the result before computing the actual value. As a result, we cannot directly use gradient descent to update the model parameters.&lt;/p&gt;

&lt;h2 id=&quot;lambdarank&quot;&gt;LambdaRank&lt;/h2&gt;

&lt;p&gt;The problem with RankNet is that it could not optimize information retrieval metrics directly. Here is a graphical illustration of the issue.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/posts/2018-09-01-lambdamart/ranknet_gradient.png&quot; alt=&quot;ranknet_gradient&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In the graph above, each grey line represents an irrelevant document, while blue line represents a relevant document. In the left, the number of pairwise errors is 13. By moving the relevant document at the top down by 3 and the bottom document up by 5, we can reduce the number of errors to 11. This is represented by the black arrows. However, for most information retrieval metrics, we only care about the top $k$ entries and the gradients are represented by red arrows.&lt;/p&gt;

&lt;p&gt;Is there any chance we can obtain the gradients (red arrows) directly? Based on empirical results, modifying Eq.(3) by scaling the size of change of evaluation metrics (such as NDCG and MAP) which we will denote by $\lvert\Delta Z_{ij}\rvert$ given by swapping rank position of $d_i$ and $d_j$ gives good results. As a result, in LambdaRank we assume there is a &lt;strong&gt;utility function&lt;/strong&gt; $U$ whose derivative is $\lambda_{ij}$ such that&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\lambda_{ij}=\pder[U]{s_i}=-\frac{\sigma}{1+e^{-\sigma(s_i-s_j)}}|\Delta Z_{ij}|&lt;/script&gt;

&lt;p&gt;Here we need to use utility function instead of cost function because for most information retrieval metrics, higher means better, so we would like to maximize it. As a result, the weight update rule becomes&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;w_k \rightarrow w_k + \eta\pder[U]{w_k}&lt;/script&gt;

&lt;p&gt;Let $I$ denote the set of pairs ${i, j}$ such that $d_i\rhd d_j$. For a given query, $\lambda_i$ associated with each $d_i$ is therefore&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\lambda_i=\sum_{j:\{i, j\}\in I}\lambda_{ij}-\sum_{j:\{j, i\}\in I}\lambda_{ij}&lt;/script&gt;

&lt;p&gt;Thus for each $d_i$, we can write down a utility function&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;U = \sum_{\{i, j\}\in I}|\Delta Z_{ij}|log(1+e^{-\sigma(s_i-s_j)})  \tag{4}&lt;/script&gt;

&lt;h3 id=&quot;physical-interpretation-of-lambdarank&quot;&gt;Physical Interpretation of LambdaRank&lt;/h3&gt;

&lt;p&gt;In the original paper, the authors gave a physical interpretation of LambdaRank which is noteworthy. The authors suggested that we can essentially treat each document as a point mass and $\lambda$-gradients are forces on the point mass. Positive lambda represents a push toward the top rank while negative lambda represents a push toward lower rank. We can therefore compute the net force acting on the point mass and the changes in the magnitude of the forces during training.&lt;/p&gt;

&lt;h2 id=&quot;mart&quot;&gt;MART&lt;/h2&gt;

&lt;p&gt;Before going over LambdaMART, it is worthwhile to take a quick detour to MART. The complete name for MART is Multiple Additive Regression Tree, which as its name suggests, essentially applies gradient boosting to regression trees. In a general supervised learning problem, we are trying to find an approxiamtion $\hat{f}(x)=y$ such that&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\hat{f}(x)=\argmin_{f(x)}L(y, f(x))&lt;/script&gt;

&lt;p&gt;where $L(\cdot, \cdot)$ denotes loss funtion.&lt;/p&gt;

&lt;p&gt;Under the settings of MART, we are looking for&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\hat{f}(x)=f_M(x)=\sum^M_{m=1}T(x; \Theta_m)&lt;/script&gt;

&lt;p&gt;where $T(x; \Theta_m)$ denotes a tree model with prameters $\Theta_m$.&lt;/p&gt;

&lt;p&gt;With stage-wise additive modeling (for more details, refer to Elements of Statistical Learning Chapter 10), at each step in the forward step-wise procedure, we have&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\hat{\Theta}_m=\argmin_{\Theta_m}\sum^N_{i=1}L(y_i, f_{m-1}(x_i)+T(x_i; \Theta_m))  \tag{5}&lt;/script&gt;

&lt;p&gt;Solving the above equation exactly is quite challenging. However, we realize that this is a greedy approach. At each step, we would like $T(x_i; \Theta_m)$ to minimize Eq.(5) given $f_{m-1}$ fitted on $x_i$. Thus, $T(x_i; \Theta_m)$ is analogous to the negative gradient defined by&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;g_{im} = \Big[\pder[L(y_i, f(x_i)]{f(x_i)}\Big]_{f(x_i)=f_{m-1}(x_i)}&lt;/script&gt;

&lt;p&gt;As a result, we can now solve Eq.(5) with&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\tilde{\Theta}_m=\argmin_{\Theta}\sum^N_{i=1}[-g_{im}-T(x_i; \Theta)]^2 \tag{6}&lt;/script&gt;

&lt;p&gt;From Eq.(6), we can see that for MART model, we do not really need to define a specific loss function. In fact, all we care about is the gradient $g_{im}$.&lt;/p&gt;

&lt;h2 id=&quot;lambdamart&quot;&gt;LambdaMART&lt;/h2&gt;

&lt;p&gt;Now, we can see that&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;MART is a general framework that only requires a gradient to work&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;LambdaRank defines a gradient&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;LambdaRank and MART naturally pairs up which gives us LambdaMART.&lt;/p&gt;

&lt;p&gt;From Eq.(4), we can obtain&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\pder[U]{s_i}=\sum_{\{i, j\}\in I}\frac{-\sigma|\Delta Z_{ij}|}{1+e^{\sigma(s_i-s_j)}}=\sum_{\{i, j\}\in I}-\sigma|\Delta Z_{ij}|\rho_{ij}&lt;/script&gt;

&lt;p&gt;where $\rho_{ij}\defeq\frac{1}{1+e^{\sigma(s_i-s_j)}}$.&lt;/p&gt;

&lt;p&gt;Then we can also obtain&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\frac{\partial^2U}{\partial^2_{s_i}}=\sum_{\{i, j\}\in I}\sigma^2|\Delta Z_{ij}|\rho_{ij}(1-\rho_{ij})&lt;/script&gt;

&lt;p&gt;The Newton step-size for the $k$-th leaf of the $m$-th tree is&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\gamma_{km}=\frac{\sum_{x_i\in R_{km}}\pder[U]{s_i}}{\sum_{x_i\in R_{km}}\frac{\partial^2U}{\partial^2_{s_i}}}&lt;/script&gt;

&lt;p&gt;The overall procedure of LambdaMART is therefore given by&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/posts/2018-09-01-lambdamart/LambdaMART.jpg&quot; alt=&quot;Algorithm&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.microsoft.com/en-us/research/publication/from-ranknet-to-lambdarank-to-lambdamart-an-overview/&quot;&gt;From RankNet to LambdaRank to LambdaMART: An Overview&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.cs.cmu.edu/~pinard/Papers/sigirfp092-donmez.pdf&quot;&gt;On the Local Optimality of LambdaRank&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/LambdaMART_Final.pdf&quot;&gt;Adapting Boosting for Information Retrieval Measures&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://papers.nips.cc/paper/2971-learning-to-rank-with-nonsmooth-cost-functions.pdf&quot;&gt;Learning to Rank with Nonsmooth Cost Functions&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://liam0205.me/2016/07/10/a-not-so-simple-introduction-to-lambdamart/&quot;&gt;A Not So Simple Introduction to LambdaMART&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><author><name>Shiki</name></author><category term="machine learning" /><summary type="html">Last time we talked about the general workflow of learning to rank and how to implement LambdaMART in python. This time, we will go through the derivations of LambdaMART.</summary></entry><entry><title type="html">Learning to Rank - Overview</title><link href="http://localhost:4000/2018/08/30/Learning-to-Rank/" rel="alternate" type="text/html" title="Learning to Rank - Overview" /><published>2018-08-30T00:00:00-04:00</published><updated>2018-08-30T00:00:00-04:00</updated><id>http://localhost:4000/2018/08/30/Learning-to-Rank</id><content type="html" xml:base="http://localhost:4000/2018/08/30/Learning-to-Rank/">&lt;p&gt;Learning to Rank (LTR) is essentially applying supervised machine learning to ranking problems. For ranking problem, we are usually given a set of items and our objective is to find the optimal ordering of this set. For example, in web search, we need to find the best ordering of websites such that websites most relevant to the given query are ordered in the front.&lt;/p&gt;

&lt;p&gt;For the purpose of this note, I will give a quick overview of the LTR framework and provide a demo on how to actually solve a LTR problem in Python with LambdaMART, which is one of the most successful LTR methods.&lt;/p&gt;

&lt;h2 id=&quot;ltr-workflow&quot;&gt;LTR Workflow&lt;/h2&gt;

&lt;p&gt;Similar to other supervised learning, we need a training set. In tasks like classification or regression, a typical training observation has the form of $(x_i, y_i)$ pair with $x_i$ denotes its feature and $y_i$ denotes the corresponding value we are trying to predict. However, LTR is different in the set-up because usually we need to order the results based on a particular input. Using the example of web search again, the optimal ordering of search results depends on what the user is actually looking for. With different queries, the ordering of websites should be quite different. As a result, training set of LTR tasks has the following form:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;(q_i, D_i) \\ D_i=\{(d_{i1}, y_{i1}), (d_{i2}, y_{i2}), ...(d_{im}, y_{im})\}&lt;/script&gt;

&lt;p&gt;where $q_i$ denotes the query, $D_i$ is an ordered set containing documents $d_{ij}$ together with their relevance score $y_{ij}$ given query $q_i$.&lt;/p&gt;

&lt;p&gt;Once training set is ready, we can train a specific algorithm to learn a ranking model so that for an unseen query and its associated documents so that we can predict the ranking of the documents based on the metric (i.e. loss function) defined when we are training the ranking model.&lt;/p&gt;

&lt;h2 id=&quot;example-with-python&quot;&gt;Example with Python&lt;/h2&gt;

&lt;p&gt;Here is a quick example of how to use LTR in Python using &lt;code class=&quot;highlighter-rouge&quot;&gt;xgboost&lt;/code&gt;. As an alternaive, you can also use &lt;code class=&quot;highlighter-rouge&quot;&gt;lightgbm&lt;/code&gt; which has similar interface.&lt;/p&gt;

&lt;p&gt;First, we need to download the dataset from &lt;a href=&quot;https://s3-us-west-2.amazonaws.com/xgboost-examples/MQ2008.rar&quot;&gt;here&lt;/a&gt;. Once download finishes, extract the files and copy &lt;code class=&quot;highlighter-rouge&quot;&gt;train.txt&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;test.txt&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;vali.txt&lt;/code&gt; from &lt;code class=&quot;highlighter-rouge&quot;&gt;Fold1&lt;/code&gt; to a desired folder.&lt;/p&gt;

&lt;p&gt;Next, download the data processing script called &lt;code class=&quot;highlighter-rouge&quot;&gt;trans_data.py&lt;/code&gt; from &lt;a href=&quot;https://github.com/dmlc/xgboost/blob/master/demo/rank/trans_data.py&quot;&gt;here&lt;/a&gt;. Make sure to place it in the same folder as &lt;code class=&quot;highlighter-rouge&quot;&gt;train.txt&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;test.txt&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;vali.txt&lt;/code&gt;. Now open terminal and run the following command:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;python trans_data.py train.txt mq2008.train mq2008.train.group

python trans_data.py test.txt mq2008.test mq2008.test.group

python trans_data.py vali.txt mq2008.vali mq2008.vali.group
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This will get us the features as well as group information required to perform LTR tasks.&lt;/p&gt;

&lt;p&gt;Now in Python, we first load all the required packages and data.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;xgboost&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;xgb&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;xgboost&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DMatrix&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sklearn.datasets&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;load_svmlight_file&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# load feature&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;x_train&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y_train&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;load_svmlight_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;mq2008.train&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;x_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;load_svmlight_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;mq2008.vali&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;x_test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y_test&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;load_svmlight_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;mq2008.test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# load group information&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;group_train&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;mq2008.train.group&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;r&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;readlines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;group_train&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;group_valid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;mq2008.vali.group&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;r&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;readlines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;group_valid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;group_test&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;mq2008.test.group&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;r&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;readlines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;group_test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;For &lt;code class=&quot;highlighter-rouge&quot;&gt;xgboost&lt;/code&gt;, we need to transform data into a built-in data structure called &lt;code class=&quot;highlighter-rouge&quot;&gt;DMatrix&lt;/code&gt; before training the model.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;train_dmatrix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DMatrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x_train&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y_train&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;valid_dmatrix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DMatrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;test_dmatrix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DMatrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x_test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# set group information&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;train_dmatrix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;group_train&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;valid_dmatrix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;group_valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now training and get prediction from the model will be fairly straightforward. It is similar to classification or regression, except that LTR need an extra group information (which we have incorporated into DMatrix in the previous step).&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'objective'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'rank:pairwise'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'eta'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'gamma'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
               &lt;span class=&quot;s&quot;&gt;'min_child_weight'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'max_depth'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;xgb_model&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xgb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;train&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;train_dmatrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num_boost_round&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                      &lt;span class=&quot;n&quot;&gt;evals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;valid_dmatrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'validation'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pred&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xgb_model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;predict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test_dmatrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Note that the predicted results give us a score for ordering the test set. Thus before applying any evaluation metric, we need to sort the test set based on the scores first.&lt;/p&gt;</content><author><name>Shiki</name></author><category term="machine learning" /><category term="python" /><summary type="html">Learning to Rank (LTR) is essentially applying supervised machine learning to ranking problems. For ranking problem, we are usually given a set of items and our objective is to find the optimal ordering of this set. For example, in web search, we need to find the best ordering of websites such that websites most relevant to the given query are ordered in the front.</summary></entry><entry><title type="html">Installing Ubuntu on MacBook Pro</title><link href="http://localhost:4000/2018/08/28/Installing-Ubuntu-on-MacBook-Pro/" rel="alternate" type="text/html" title="Installing Ubuntu on MacBook Pro" /><published>2018-08-28T00:00:00-04:00</published><updated>2018-08-28T00:00:00-04:00</updated><id>http://localhost:4000/2018/08/28/Installing%20Ubuntu%20on%20MacBook%20Pro</id><content type="html" xml:base="http://localhost:4000/2018/08/28/Installing-Ubuntu-on-MacBook-Pro/">&lt;p&gt;This posts records the steps I have taken to install Linux Mint 18.3 on MacBook Pro 11, 3 as well as some of the issues I have encoutnered with solutions I found online. The steps should be almost identical for installing Ubuntu.&lt;/p&gt;

&lt;h2 id=&quot;install-linux-mint&quot;&gt;Install Linux Mint&lt;/h2&gt;

&lt;p&gt;Honestly this is the easiest step. In short, one just have to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;partition the disk in OS X using &lt;code class=&quot;highlighter-rouge&quot;&gt;Disk Utility&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;create a bootable USB stick&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;install Linux Mint&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;More detailed steps can be found &lt;a href=&quot;http://www.daveoncode.com/2015/05/26/installing-and-configuring-linux-mint-in-dual-boot-on-an-apple-macbook-pro-with-retina-display/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A few caveats regarding the tutorial given by the link above based on my experience:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;if you have windows machine, &lt;a href=&quot;https://www.linuxliveusb.com/&quot;&gt;Linux Live USB Creator&lt;/a&gt; can be a very handy tool to create bootable USB stick&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;during installation, you may want to make sure you are connected to the internet. To do that, once you boot into the USB stick, open driver manager and install the wifi driver. This is similar to step 6.2 in the tutorial.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;install-nvidia-drivers-on-macbook-pro&quot;&gt;Install NVIDIA Drivers on MacBook Pro&lt;/h2&gt;

&lt;p&gt;Once you are done installing the system and set up internet connection, you can start working on this. The following steps should help you getting the latest official drivers from NVIDIA. First, open your terminal and enter&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo add-apt-repository ppa:graphics-drivers/ppa
sudo apt update
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Then open drivers manager, you should be able to see the latest drivers available. Although it is possible to do all these in terminal, to save the trouble, I would recommend just using the drivers manager.&lt;/p&gt;

&lt;p&gt;Once you are done installing the drivers from drivers manager, the tough fight starts.&lt;/p&gt;

&lt;h3 id=&quot;adjust-brightness-after-installing-nvidia-driver&quot;&gt;Adjust Brightness after Installing NVIDIA Driver&lt;/h3&gt;

&lt;p&gt;A common problem one encounters after installing NVIDIA drivers is not able to adjust brightness with function keys. To solve this problem, open your terminal, enter&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo nano /etc/X11/xorg.conf
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;and copy the following&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Section &lt;span class=&quot;s2&quot;&gt;&quot;Screen&quot;&lt;/span&gt;
	Identifier	&lt;span class=&quot;s2&quot;&gt;&quot;Default Screen&quot;&lt;/span&gt;
	DefaultDepth	24
EndSection
Section &lt;span class=&quot;s2&quot;&gt;&quot;Module&quot;&lt;/span&gt;
	Load	&lt;span class=&quot;s2&quot;&gt;&quot;glx&quot;&lt;/span&gt;
EndSection
Section &lt;span class=&quot;s2&quot;&gt;&quot;Device&quot;&lt;/span&gt;
	Identifier	&lt;span class=&quot;s2&quot;&gt;&quot;Default Device&quot;&lt;/span&gt;
	Driver	&lt;span class=&quot;s2&quot;&gt;&quot;nvidia&quot;&lt;/span&gt;
	Option	&lt;span class=&quot;s2&quot;&gt;&quot;NoLogo&quot;&lt;/span&gt;	&lt;span class=&quot;s2&quot;&gt;&quot;True&quot;&lt;/span&gt;
	Option &lt;span class=&quot;s2&quot;&gt;&quot;RegistryDwords&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;EnableBrightnessControl=1&quot;&lt;/span&gt;
EndSection
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Exit and save. Most tutorials would tell you a similar step when you are working with NVIDIA on Ubuntu. However, to make it work on MacBook, you need an extra step. Now, in the terminal, enter&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;setpci -v -H1 -s 00:01.00 &lt;span class=&quot;nv&quot;&gt;BRIDGE_CONTROL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Usually, it is a good idea to write this line to &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/rc.local&lt;/code&gt; so it is executed when the system starts.&lt;/p&gt;

&lt;h3 id=&quot;using-intel-graphics-card-in-ubuntu-on-macbook-pro&quot;&gt;Using Intel Graphics Card in Ubuntu on MacBook Pro&lt;/h3&gt;

&lt;p&gt;Even if one has installed &lt;code class=&quot;highlighter-rouge&quot;&gt;nvidia-prime&lt;/code&gt;, it is not possible to switch video card on a MacBook, because Intel’s graphic card is not yet acessible to Ubuntu. To overcome this problem, we need a hack called &lt;code class=&quot;highlighter-rouge&quot;&gt;apple_set_os.efi&lt;/code&gt; which is available &lt;a href=&quot;https://github.com/0xbb/apple_set_os.efi&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here are the steps to make it work on your MacBook adapted from the write-up &lt;a href=&quot;https://github.com/Dunedan/mbp-2016-linux/issues/6&quot;&gt;suggested by Andrey&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;1-build-apple_set_osefi&quot;&gt;1. Build &lt;code class=&quot;highlighter-rouge&quot;&gt;apple_set_os.efi&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;The author listed a few methods to build it. I would recommend build it from source and NOT use the relseased ones since they can be quirky.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;apt-get install gnu-efi
git clone https://github.com/0xbb/apple_set_os.efi
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;apple_set_os.efi
make
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;2-copy-to-efi-partition&quot;&gt;2. Copy to EFI partition&lt;/h4&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo cp apple_set_os.efi /boot/efi/EFI/
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;3-add-a-new-menu-entry-to-grub-boot-loader&quot;&gt;3. Add a new menu entry to Grub boot loader&lt;/h4&gt;

&lt;p&gt;Open terminal and enter&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo nano /etc/grub.d/40_custom
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;and copy the following&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;menuentry &lt;span class=&quot;s2&quot;&gt;&quot;Unlock Intel IGD&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  search --no-floppy --set&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;root --file /EFI/apple_set_os.efi
  chainloader /EFI/apple_set_os.efi
  boot
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Then open &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/default/grub&lt;/code&gt; file and make sure they look like&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;GRUB_DEFAULT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0
&lt;span class=&quot;c&quot;&gt;# GRUB_HIDDEN_TIMEOUT=0&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# GRUB_HIDDEN_TIMEOUT_QUIET=true&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;GRUB_TIMEOUT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;10
&lt;span class=&quot;nv&quot;&gt;GRUB_CMDLINE_LINUX&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;acpi_backlight=intel_backlight&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now, run &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo update-grub&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&quot;4-switch-to-intel&quot;&gt;4. Switch to Intel&lt;/h4&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://github.com/0xbb/gpu-switch
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;gpu-switch/
sudo ./gpu-switch -i
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;5-reboot&quot;&gt;5. Reboot&lt;/h4&gt;

&lt;p&gt;Once your MacBook reboot, before selecting the actual OS such Ubuntu or Mint, remember to select &lt;code class=&quot;highlighter-rouge&quot;&gt;Unlock Intel IGD&lt;/code&gt; first. If not, you may see a flickering screen and have to for power down.&lt;/p&gt;

&lt;p&gt;Once you are in the system, you can verify if your Intel graphic is activated by&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;lspci | grep &lt;span class=&quot;s2&quot;&gt;&quot;VGA&quot;&lt;/span&gt;
00:02.0 VGA compatible controller: Intel Corporation Crystal Well Integrated Graphics Controller &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;rev 08&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
01:00.0 VGA compatible controller: NVIDIA Corporation GK107M &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;GeForce GT 750M Mac Edition] &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;rev a1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;glxinfo | grep &lt;span class=&quot;s2&quot;&gt;&quot;OpenGL renderer&quot;&lt;/span&gt;
OpenGL renderer string: Mesa DRI Intel&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;R&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; Haswell Mobile
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Once everythin works out correctly, you can skip the step of selecting &lt;code class=&quot;highlighter-rouge&quot;&gt;Unlock Intel IGD&lt;/code&gt; by writing the following to &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/grub.d/40_custom&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;search --no-floppy --set&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;root --file /EFI/apple_set_os.efi
chainloader /EFI/apple_set_os.efi
boot
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;extra-steps-for-overheating&quot;&gt;Extra Steps for Overheating&lt;/h3&gt;

&lt;p&gt;The main motiavation behind using Intel graphics instead of NVIDIA is to reduce heat and enhance battery life. During my search online, I found a few other methods that could potentially help to reduce overheating.&lt;/p&gt;

&lt;h4 id=&quot;1-tlp&quot;&gt;1. &lt;code class=&quot;highlighter-rouge&quot;&gt;tlp&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;TLP is a power management tool on Linux. To install,&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo add-apt-repository ppa:linrunner/tlp
sudo apt-get update
sudo apt-get install tlp tlp-rdw
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;2-cpufreq&quot;&gt;2. &lt;code class=&quot;highlighter-rouge&quot;&gt;cpufreq&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;This tool allows you to run your laptop in two modes, which are &lt;code class=&quot;highlighter-rouge&quot;&gt;performance&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;powersave&lt;/code&gt;. I did not test how much energy it could save, just including it here for reference.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get install indicator-cpufreq
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Note that with newer Core processors, you will not be able to choose specific frequency with &lt;code class=&quot;highlighter-rouge&quot;&gt;cpufreq&lt;/code&gt; as some screen shots you can find online. For more details, please refer to this &lt;a href=&quot;https://askubuntu.com/questions/544266/why-are-missing-the-frequency-options-on-cpufreq-utils-indicator&quot;&gt;SE thread&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;3-mbpfan&quot;&gt;3. &lt;code class=&quot;highlighter-rouge&quot;&gt;mbpfan&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;This package uses the temperature from coretemp module as input and adjusts the fan speed accordingly. The installation is not very straightforward, but the author has provided a easy-to-follow step-by-step instruction &lt;a href=&quot;https://ineed.coffee/3838/a-beginners-tutorial-for-mbpfan-under-ubuntu/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;p&gt;http://www.daveoncode.com/2015/05/26/installing-and-configuring-linux-mint-in-dual-boot-on-an-apple-macbook-pro-with-retina-display/&lt;/p&gt;

&lt;p&gt;https://iocrunch.com/2014/08/nvidia-backlight-in-linux-on-macbookpro-113/&lt;/p&gt;

&lt;p&gt;https://github.com/Dunedan/mbp-2016-linux/issues/6&lt;/p&gt;

&lt;p&gt;https://itsfoss.com/reduce-overheating-laptops-linux/&lt;/p&gt;

&lt;p&gt;https://blog.csdn.net/redstone0001/article/details/17042011&lt;/p&gt;

&lt;p&gt;https://askubuntu.com/questions/544266/why-are-missing-the-frequency-options-on-cpufreq-utils-indicator&lt;/p&gt;

&lt;p&gt;https://ineed.coffee/3838/a-beginners-tutorial-for-mbpfan-under-ubuntu/&lt;/p&gt;</content><author><name>Shiki</name></author><category term="Linux" /><summary type="html">This posts records the steps I have taken to install Linux Mint 18.3 on MacBook Pro 11, 3 as well as some of the issues I have encoutnered with solutions I found online. The steps should be almost identical for installing Ubuntu.</summary></entry><entry><title type="html">Homemade sklearn Classifier</title><link href="http://localhost:4000/2017/11/12/SKLearn-Compatible-Classifier/" rel="alternate" type="text/html" title="Homemade sklearn Classifier" /><published>2017-11-12T00:00:00-05:00</published><updated>2017-11-12T00:00:00-05:00</updated><id>http://localhost:4000/2017/11/12/SKLearn%20Compatible%20Classifier</id><content type="html" xml:base="http://localhost:4000/2017/11/12/SKLearn-Compatible-Classifier/">&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sklearn&lt;/code&gt; offers a variety of tools which allows quick set-up of machine learning pipelines, and many other packages are also compatible with &lt;code class=&quot;highlighter-rouge&quot;&gt;sklearn&lt;/code&gt; api. When there comes an occasion you have to implement your own algorithm, it is a good idea to make it the &lt;code class=&quot;highlighter-rouge&quot;&gt;sklearn&lt;/code&gt; way (so you can leave hyper-parameter tuning to &lt;code class=&quot;highlighter-rouge&quot;&gt;bayes_opt&lt;/code&gt;)&lt;/p&gt;

&lt;h2 id=&quot;the-steps&quot;&gt;The Steps&lt;/h2&gt;

&lt;p&gt;There are four essential components of a &lt;code class=&quot;highlighter-rouge&quot;&gt;sklearn&lt;/code&gt; classifier: &lt;code class=&quot;highlighter-rouge&quot;&gt;get_params&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;set_params&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;fit&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;predict&lt;/code&gt;. The first two components can be easily accomplished by inheriting from the &lt;code class=&quot;highlighter-rouge&quot;&gt;BaseEstimator&lt;/code&gt; class from &lt;code class=&quot;highlighter-rouge&quot;&gt;sklearn.base&lt;/code&gt;. For classifiers, you should also inherit from &lt;code class=&quot;highlighter-rouge&quot;&gt;ClassifierMixin&lt;/code&gt; to get support for &lt;code class=&quot;highlighter-rouge&quot;&gt;model_selection.GridsearchCV&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;model_selection.cross_val_score&lt;/code&gt;. Other supported types for machine learning are &lt;code class=&quot;highlighter-rouge&quot;&gt;RegressorMixin&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;ClusterMixin&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I realized that there are quite a few posts on this topic, and I think the one by &lt;a href=&quot;http://danielhnyk.cz/creating-your-own-estimator-scikit-learn/&quot;&gt;Daniel&lt;/a&gt; is great, so I will not repeat the details here. In addition, the official &lt;a href=&quot;http://scikit-learn.org/dev/developers/contributing.html#rolling-your-own-estimator&quot;&gt;document&lt;/a&gt; also contains some instructions on the &lt;code class=&quot;highlighter-rouge&quot;&gt;sklearn&lt;/code&gt; standard.&lt;/p&gt;

&lt;h2 id=&quot;an-example&quot;&gt;An Example&lt;/h2&gt;

&lt;p&gt;The algorithm here was taken from part of my undergraduate project. In retrospect, there are a lot of areas for improvements, but I will leave it as it is. The code below is basically a simple implementation of &lt;a href=&quot;http://www.dtic.mil/get-tr-doc/pdf?AD=ADA551287&quot;&gt;this paper&lt;/a&gt;. The algorithms is a little bit involved. I will try to add a simple explanation later.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;numpy&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;np&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;scipy&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;scipy.spatial.distance&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pdist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;squareform&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sklearn.base&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BaseEstimator&lt;/span&gt;


&lt;span class=&quot;c&quot;&gt;# helper function for graph Laplacian&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# returns normalized graph Laplacian&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;_graph_laplacian&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input_vector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tau&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    
    &lt;span class=&quot;c&quot;&gt;# This computes the graph laplacian according to equation 2.5&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;data_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input_vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;pairwise_sq_dists&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;squareform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pdist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input_vector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'sqeuclidean'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;L&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scipy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pairwise_sq_dists&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tau&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eye&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:])&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;# compute inverse square root of diagonal matrix&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;diag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;D&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;diag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;D_inv_sqrt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zeros&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fill_diagonal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;D_inv_sqrt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;diagonal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;# compute normalized graph laplacian by equation 2.7&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Ls&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D_inv_sqrt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;D_inv_sqrt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Ls&lt;/span&gt;


&lt;span class=&quot;c&quot;&gt;# helper function for convexsplit&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;_convexsplit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eigenvectors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eigenvalues&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;train_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;epsilon&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maxit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    
    &lt;span class=&quot;c&quot;&gt;#This method performs the convexsplit scheme to minimize energy potential&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;# eigenvectors is a matrix whose columns are eigenvectors Phi_i&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# eigenvalues is an array whose entries are corresponding eigenvalues Lambda_i&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# here we deal with the case when eigenvectors is a square matrix&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;dt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eigenvalues&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;# initialize matrices for storage&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# this part can be optimized&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# since we do not need to store the result from each iteration&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zeros&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maxit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zeros&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maxit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;D&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zeros&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maxit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;F&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zeros&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;U&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zeros&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maxit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;# initialize u_0 and lambda&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# gamma here denotes lambda in the original formula&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;U&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zeros&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;U&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;train_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;train_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transpose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;gamma&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zeros&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;gamma&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;train_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ones&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;train_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;# decompose u0 u0.^3 as sums of Phi_i&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# where 0 &amp;lt;= i &amp;lt;= k-1&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;a1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;linalg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;solve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eigenvectors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;U&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;u0_cube&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;U&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;b1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;linalg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;solve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eigenvectors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u0_cube&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a1&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b1&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;F&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;epsilon&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eigenvalues&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;# convexsplit iteration&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;maxit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;epsilon&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; \
                        &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;epsilon&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;U&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eigenvectors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;linalg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;solve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eigenvectors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;U&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;linalg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;solve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eigenvectors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                        &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;multiply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gamma&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;U&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;U&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;U&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maxit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ConvexsplitClassifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BaseEstimator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ClassifierMixin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# This is the sklearn style interface&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tau&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;epsilon&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maxit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# Initialize classifier&lt;/span&gt;
        
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tau&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tau&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;epsilon&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;epsilon&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;maxit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maxit&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x_train&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y_train&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;


    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x_train&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y_train&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# For a standard fit method,&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# you should verify all inputs are valid here&lt;/span&gt;

        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x_train&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x_train&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y_train&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y_train&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y_train&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y_train&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# negative cases are labelled as -1&lt;/span&gt;


    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;predict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x_test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;


        &lt;span class=&quot;n&quot;&gt;train_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x_train&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

        &lt;span class=&quot;c&quot;&gt;# combine train set with test set&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;X&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;concatenate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x_train&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x_test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        
        &lt;span class=&quot;c&quot;&gt;# compute laplacian of combined data&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;L&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_graph_laplacian&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tau&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tau&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        
        &lt;span class=&quot;c&quot;&gt;# compute eigenvalues and eigenvectors of laplacian&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Lam&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Phi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;linalg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        
        &lt;span class=&quot;c&quot;&gt;# initialize u0&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;u0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zeros&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;u0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;train_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y_train&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;y_pred&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_convexsplit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Phi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Lam&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;train_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;train_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:]&lt;/span&gt;

        &lt;span class=&quot;c&quot;&gt;# sign(u) gives the predicted class&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# format the output to 0 and 1&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;y_pred&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y_pred&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;y_pred&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y_pred&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y_pred&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;</content><author><name>Shiki</name></author><category term="python" /><category term="machine learning" /><summary type="html">sklearn offers a variety of tools which allows quick set-up of machine learning pipelines, and many other packages are also compatible with sklearn api. When there comes an occasion you have to implement your own algorithm, it is a good idea to make it the sklearn way (so you can leave hyper-parameter tuning to bayes_opt)</summary></entry><entry><title type="html">3D Interactive Visualization of Graph</title><link href="http://localhost:4000/2017/11/07/3D-Interactive-Visualization-of-Graph/" rel="alternate" type="text/html" title="3D Interactive Visualization of Graph" /><published>2017-11-07T20:00:00-05:00</published><updated>2017-11-07T20:00:00-05:00</updated><id>http://localhost:4000/2017/11/07/3D-Interactive-Visualization-of-Graph</id><content type="html" xml:base="http://localhost:4000/2017/11/07/3D-Interactive-Visualization-of-Graph/">&lt;p&gt;This short demo illustrates how to plot 3D interactive Visualization of Graph with &lt;code class=&quot;highlighter-rouge&quot;&gt;plotly&lt;/code&gt;. The following packages are required: &lt;code class=&quot;highlighter-rouge&quot;&gt;plotly&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;networkx&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;igraph&lt;/code&gt;, which can be installed with &lt;code class=&quot;highlighter-rouge&quot;&gt;pip&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;building-graph-from-raw-data&quot;&gt;Building Graph from Raw Data&lt;/h2&gt;

&lt;h3 id=&quot;data-preview&quot;&gt;Data Preview&lt;/h3&gt;
&lt;p&gt;I am using a sample data set generated by random numbers. By the way, I have uploaded sample data and ipython notebook of this demo &lt;a href=&quot;https://github.com/Shiki-H/graph-visualization-demo&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read_csv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'sample.csv'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div&gt;
&lt;style&gt;
    .dataframe thead tr:only-child th {
        text-align: right;
    }

    .dataframe thead th {
        text-align: left;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }
&lt;/style&gt;
&lt;table border=&quot;1&quot; class=&quot;dataframe&quot;&gt;
  &lt;thead&gt;
    &lt;tr style=&quot;text-align: right;&quot;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;receiver&lt;/th&gt;
      &lt;th&gt;sender&lt;/th&gt;
      &lt;th&gt;data_received&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;71088000517510301092&lt;/td&gt;
      &lt;td&gt;617405214587577481&lt;/td&gt;
      &lt;td&gt;632&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;71088000517510301092&lt;/td&gt;
      &lt;td&gt;7884137335649481972584&lt;/td&gt;
      &lt;td&gt;76715&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;71088000517510301092&lt;/td&gt;
      &lt;td&gt;7884137335649481972584&lt;/td&gt;
      &lt;td&gt;51591&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;71088000517510301092&lt;/td&gt;
      &lt;td&gt;2714752644432115202&lt;/td&gt;
      &lt;td&gt;33814&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;71088000517510301092&lt;/td&gt;
      &lt;td&gt;7884137335649481972584&lt;/td&gt;
      &lt;td&gt;5651&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;In the dataset, &lt;code class=&quot;highlighter-rouge&quot;&gt;receiver&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;sender&lt;/code&gt; columns contain the id of the sender and receiver in a network, while data received is the amount of data receiver received from the sender.&lt;/p&gt;

&lt;h3 id=&quot;building-graph&quot;&gt;Building Graph&lt;/h3&gt;

&lt;p&gt;For simple illustration, I am building a non-directed graph using the number of connections between sender and receiver as weight. I removed edges with weight 1 since they are not very interesting.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Data Preparation&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;df_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'receiver'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'sender'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;df_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;df_id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;groupby&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'receiver'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'sender'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;agg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'sender'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'count'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;df_id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;columns&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'count'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;df_id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reset_index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inplace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Build Graph&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;G&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Graph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mat_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;df_id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;values&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mat_id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mat_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_edge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mat_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mat_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;weight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mat_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Here we will save &lt;code class=&quot;highlighter-rouge&quot;&gt;G&lt;/code&gt; to gml file for later use.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;networkx.readwrite&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gml&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gml&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write_gml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'graph.gml'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;graph-analysis&quot;&gt;Graph Analysis&lt;/h2&gt;

&lt;p&gt;We use the louvian algorithm to perform some simple community discovery on the graph we just built.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;community&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;partition&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;community&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;best_partition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;G&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;df_partition&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DataFrame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;partition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;orient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'index'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# reformat partition for later use&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;df_partition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reset_index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inplace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;df_partition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;columns&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'id'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'group'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;df_group&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DataFrame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df_partition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;groupby&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'group'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;','&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;group_list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;members&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;df_group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;group_list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;frozenset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;members&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;','&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;visualization&quot;&gt;Visualization&lt;/h2&gt;

&lt;p&gt;We will need iGraph and plotly for 3D visualization. Note that we need to run plotly in offline mode.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;igraph&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;ig&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;plotly&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;plotly.offline&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;offline&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;plotly.graph_objs&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;go&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;offline&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;init_notebook_mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;We need to load the graph &lt;code class=&quot;highlighter-rouge&quot;&gt;G&lt;/code&gt; to an iGraph object, which can be easily done by loading the gml file we have saved.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;F&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Graph&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Read_GML&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'graph.gml'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Before getting ready to draw the graph, we need to obtain the 3D coordinate of the nodes, and here is why I am using iGraph instead of networkx, since networkx has a poor support for 3D graph. For simplicity, I followed the instructions on plotly official website, which can be found &lt;a href=&quot;https://plot.ly/python/3d-network-graph/&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;layt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'kk'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dim&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Edges&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;es&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Edges&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;tuple&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'label'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df_partition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df_partition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'id'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'group'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Xn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;# x-coordinates of nodes&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Yn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;# y-coordinates&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Zn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;# z-coordinates&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Xe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Ye&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Ze&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Edges&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Xe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;# x-coordinates of edge ends&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Ye&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Ze&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;plotly.plotly&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;py&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;plotly.graph_objs&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;trace1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Scatter3d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Xe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
               &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Ye&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
               &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Ze&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
               &lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'lines'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
               &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'rgb(125,125,125)'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
               &lt;span class=&quot;n&quot;&gt;hoverinfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'none'&lt;/span&gt;
               &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;trace2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Scatter3d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Xn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
               &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Yn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
               &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Zn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
               &lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'markers'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
               &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'id'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
               &lt;span class=&quot;n&quot;&gt;marker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Marker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;symbol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'dot'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                             &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                             &lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                             &lt;span class=&quot;n&quot;&gt;colorscale&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'jet'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                             &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'rgb(50,50,50)'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                             &lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
               &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
               &lt;span class=&quot;n&quot;&gt;hoverinfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'text'&lt;/span&gt;
               &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;axis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;showbackground&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;showline&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;zeroline&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;showgrid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;showticklabels&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;''&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;layout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Layout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Network of Communications Weighted by Connection (3D visualization)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;showlegend&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;scene&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Scene&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;xaxis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;XAxis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;yaxis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;YAxis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;zaxis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ZAxis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Margin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;hovermode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'closest'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;annotations&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Annotations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;
           &lt;span class=&quot;n&quot;&gt;Annotation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
           &lt;span class=&quot;n&quot;&gt;showarrow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
               &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;xref&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'paper'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;yref&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'paper'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;xanchor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'left'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;yanchor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'bottom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;font&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Font&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;14&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;trace1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trace2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Figure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;layout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;offline&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iplot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Network'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;script src=&quot;https://cdn.plot.ly/plotly-latest.min.js&quot;&gt;&lt;/script&gt;

&lt;div id=&quot;3d3fcfbd-7cb6-488e-82d8-882c5dd54076&quot; style=&quot;height: 1000px; width: 1000px;&quot; class=&quot;plotly-graph-div&quot;&gt;&lt;/div&gt;
&lt;script type=&quot;text/javascript&quot;&gt;window.PLOTLYENV=window.PLOTLYENV || {};window.PLOTLYENV.BASE_URL=&quot;https://plot.ly&quot;;Plotly.newPlot(&quot;3d3fcfbd-7cb6-488e-82d8-882c5dd54076&quot;, [{&quot;type&quot;: &quot;scatter3d&quot;, &quot;x&quot;: [-9.626346539046287, -8.623090039344206, null, -8.623090039344206, -8.219901681530164, null, -8.623090039344206, -7.673649341631782, null, -8.623090039344206, -8.240400616838228, null, -8.623090039344206, -8.920108649997871, null, -8.623090039344206, -8.615378446519872, null, -8.623090039344206, -7.835776677609554, null, -8.623090039344206, -7.854329332277808, null, -11.789026887203002, -12.104849309051929, null, -11.789026887203002, -11.344169731143687, null, -11.789026887203002, -11.530581670867702, null, -11.789026887203002, -12.391884687522362, null, -11.789026887203002, -11.076906334407322, null, -11.789026887203002, -11.506312278445696, null, -11.789026887203002, -12.425975578400028, null, -11.789026887203002, -11.290763984354069, null, -11.789026887203002, -12.867524518912452, null, -11.789026887203002, -10.93047215202216, null, -11.789026887203002, -12.057627306678896, null, -11.789026887203002, -12.206349582370809, null, -11.789026887203002, -12.106374962767179, null, -11.789026887203002, -11.912901274828444, null, -11.789026887203002, -13.05505218744675, null, -11.789026887203002, -12.654912227236382, null, -11.789026887203002, -10.862903456023018, null, -11.789026887203002, -11.20167757592195, null, -11.789026887203002, -10.601356521081202, null, -11.789026887203002, -11.875494677481356, null, -11.789026887203002, -11.557180849588473, null, -11.789026887203002, -11.047210446932914, null, -11.789026887203002, -12.457041091844786, null, -11.789026887203002, -11.788077228349037, null, -11.789026887203002, -12.630425258422282, null, -11.789026887203002, -13.082173987396606, null, -11.789026887203002, -11.688873492823502, null, -11.789026887203002, -10.773228276891555, null, -11.789026887203002, -12.885298270266277, null, -11.789026887203002, -12.304393701025948, null, -11.789026887203002, -10.585628047368564, null, -11.789026887203002, -10.498614541999745, null, -11.789026887203002, -12.727133968135385, null, -11.789026887203002, -12.058441156506992, null, -11.789026887203002, -12.196718991569822, null, -11.789026887203002, -11.084536977088622, null, -11.789026887203002, -11.583404202804841, null, -11.789026887203002, -11.33623854004443, null, -11.789026887203002, -12.821731140033085, null, -11.789026887203002, -11.343684950856696, null, -11.789026887203002, -11.077547533245024, null, -11.789026887203002, -13.143703691875274, null, -11.789026887203002, -11.154899339946104, null, -11.789026887203002, -12.583841054519215, null, -11.789026887203002, -11.363580515801306, null, -11.789026887203002, -11.490466985630992, null, -11.789026887203002, -12.90512599257553, null, -11.789026887203002, -12.585107998676223, null, -11.789026887203002, -12.615941539336857, null, -11.789026887203002, -10.766155919305563, null, -11.789026887203002, -11.680397113687437, null, -11.789026887203002, -11.591330059016482, null, -11.789026887203002, -12.555292120843372, null, -11.789026887203002, -11.55207402374252, null, -11.789026887203002, -10.617155788358387, null, -11.789026887203002, -12.054777435893117, null, -11.789026887203002, -11.179028067350838, null, -11.789026887203002, -11.549078878381849, null, -11.789026887203002, -12.224904798042097, null, -11.789026887203002, -12.229462188236676, null, -11.344169731143687, -10.766401717945282, null, -11.344169731143687, -11.856669246239063, null, -11.344169731143687, -12.032050915546549, null, -11.344169731143687, -10.070910886072811, null, -11.344169731143687, -10.464186795405583, null, -11.530581670867702, -11.138154349312865, null, -11.530581670867702, -10.766401717945282, null, -11.530581670867702, -12.032512390853856, null, -11.530581670867702, -11.856669246239063, null, -11.530581670867702, -11.893440087256714, null, -11.530581670867702, -11.182955166122495, null, -11.530581670867702, -12.032050915546549, null, -11.530581670867702, -10.201088596355074, null, -11.530581670867702, -9.89496090050454, null, -12.391884687522362, -11.856669246239063, null, -11.506312278445696, -11.138154349312865, null, -11.506312278445696, -10.766401717945282, null, -11.506312278445696, -12.032512390853856, null, -11.506312278445696, -11.856669246239063, null, -11.506312278445696, -11.182955166122495, null, -11.506312278445696, -12.032050915546549, null, -11.506312278445696, -10.464186795405583, null, -12.425975578400028, -12.032512390853856, null, -12.425975578400028, -11.182955166122495, null, -12.425975578400028, -12.032050915546549, null, -11.290763984354069, -11.182955166122495, null, -10.93047215202216, -11.138154349312865, null, -10.93047215202216, -10.766401717945282, null, -10.93047215202216, -11.856669246239063, null, -10.93047215202216, -11.893440087256714, null, -10.93047215202216, -11.182955166122495, null, -10.93047215202216, -12.032050915546549, null, -10.93047215202216, -10.201088596355074, null, -10.93047215202216, -9.89496090050454, null, -10.93047215202216, -10.576512776369576, null, -10.93047215202216, -10.464186795405583, null, -12.106374962767179, -11.138154349312865, null, -12.106374962767179, -10.766401717945282, null, -12.106374962767179, -12.032512390853856, null, -12.106374962767179, -11.856669246239063, null, -12.106374962767179, -11.182955166122495, null, -12.106374962767179, -12.032050915546549, null, -12.654912227236382, -11.856669246239063, null, -12.654912227236382, -11.893440087256714, null, -12.654912227236382, -12.032050915546549, null, -10.862903456023018, -10.766401717945282, null, -10.862903456023018, -11.856669246239063, null, -10.862903456023018, -11.893440087256714, null, -10.862903456023018, -11.182955166122495, null, -10.862903456023018, -9.919752232792149, null, -10.862903456023018, -9.89496090050454, null, -10.862903456023018, -10.070910886072811, null, -10.862903456023018, -10.464186795405583, null, -11.20167757592195, -11.138154349312865, null, -11.20167757592195, -10.766401717945282, null, -11.20167757592195, -12.032512390853856, null, -11.20167757592195, -11.856669246239063, null, -11.20167757592195, -11.893440087256714, null, -11.20167757592195, -11.182955166122495, null, -11.20167757592195, -12.032050915546549, null, -11.20167757592195, -9.89496090050454, null, -11.20167757592195, -10.070910886072811, null, -11.20167757592195, -10.464186795405583, null, -10.601356521081202, -10.766401717945282, null, -10.601356521081202, -11.182955166122495, null, -10.601356521081202, -10.201088596355074, null, -10.601356521081202, -10.464186795405583, null, -11.875494677481356, -11.182955166122495, null, -11.557180849588473, -10.766401717945282, null, -11.557180849588473, -12.032512390853856, null, -11.557180849588473, -11.856669246239063, null, -11.557180849588473, -11.893440087256714, null, -11.557180849588473, -11.182955166122495, null, -11.557180849588473, -12.032050915546549, null, -11.557180849588473, -10.464186795405583, null, -11.047210446932914, -11.138154349312865, null, -11.047210446932914, -10.766401717945282, null, -11.047210446932914, -11.856669246239063, null, -11.047210446932914, -11.182955166122495, null, -11.047210446932914, -12.032050915546549, null, -11.047210446932914, -9.89496090050454, null, -11.047210446932914, -10.464186795405583, null, -12.457041091844786, -12.032512390853856, null, -12.457041091844786, -11.856669246239063, null, -12.457041091844786, -11.182955166122495, null, -12.457041091844786, -12.032050915546549, null, -11.688873492823502, -11.182955166122495, null, -10.773228276891555, -11.138154349312865, null, -10.773228276891555, -10.766401717945282, null, -10.773228276891555, -11.856669246239063, null, -10.773228276891555, -11.182955166122495, null, -10.773228276891555, -10.201088596355074, null, -10.773228276891555, -9.89496090050454, null, -10.773228276891555, -10.070910886072811, null, -10.773228276891555, -10.464186795405583, null, -10.585628047368564, -10.766401717945282, null, -10.585628047368564, -11.182955166122495, null, -10.585628047368564, -9.89496090050454, null, -10.585628047368564, -10.464186795405583, null, -10.498614541999745, -11.182955166122495, null, -10.498614541999745, -10.201088596355074, null, -10.498614541999745, -9.89496090050454, null, -10.498614541999745, -10.464186795405583, null, -12.727133968135385, -12.032050915546549, null, -12.058441156506992, -11.182955166122495, null, -12.196718991569822, -11.138154349312865, null, -12.196718991569822, -11.182955166122495, null, -12.196718991569822, -12.032050915546549, null, -11.33623854004443, -10.766401717945282, null, -11.33623854004443, -11.856669246239063, null, -11.33623854004443, -11.182955166122495, null, -11.33623854004443, -12.032050915546549, null, -11.33623854004443, -10.464186795405583, null, -12.821731140033085, -11.856669246239063, null, -12.821731140033085, -12.032050915546549, null, -11.077547533245024, -11.138154349312865, null, -11.077547533245024, -10.766401717945282, null, -11.077547533245024, -12.032512390853856, null, -11.077547533245024, -11.856669246239063, null, -11.077547533245024, -11.893440087256714, null, -11.077547533245024, -11.182955166122495, null, -11.077547533245024, -12.032050915546549, null, -11.077547533245024, -10.201088596355074, null, -11.077547533245024, -9.89496090050454, null, -11.077547533245024, -10.070910886072811, null, -11.077547533245024, -10.576512776369576, null, -11.077547533245024, -10.464186795405583, null, -12.583841054519215, -11.856669246239063, null, -12.583841054519215, -11.893440087256714, null, -12.583841054519215, -10.576512776369576, null, -11.490466985630992, -11.182955166122495, null, -10.766155919305563, -11.182955166122495, null, -10.766155919305563, -9.89496090050454, null, -11.55207402374252, -11.856669246239063, null, -11.55207402374252, -12.032050915546549, null, -11.55207402374252, -10.464186795405583, null, -10.617155788358387, -9.89496090050454, null, -10.617155788358387, -10.464186795405583, null, -12.054777435893117, -10.766401717945282, null, -12.054777435893117, -12.032512390853856, null, -12.054777435893117, -11.182955166122495, null, -12.054777435893117, -12.032050915546549, null, -11.179028067350838, -12.032512390853856, null, -11.179028067350838, -11.856669246239063, null, -11.179028067350838, -11.893440087256714, null, -11.179028067350838, -11.182955166122495, null, -11.179028067350838, -12.032050915546549, null, -11.179028067350838, -10.201088596355074, null, -11.179028067350838, -9.89496090050454, null, -11.179028067350838, -10.464186795405583, null, -11.549078878381849, -10.766401717945282, null, -11.549078878381849, -12.032512390853856, null, -11.549078878381849, -11.856669246239063, null, -11.549078878381849, -11.182955166122495, null, -11.549078878381849, -12.032050915546549, null, -11.549078878381849, -10.464186795405583, null, -12.224904798042097, -11.182955166122495, null, -8.219901681530164, -7.682464145165789, null, -7.682464145165789, -6.791685867423961, null, -7.682464145165789, -8.240400616838228, null, -7.682464145165789, -7.550110208953292, null, -7.682464145165789, -7.266107655374866, null, -7.682464145165789, -8.920108649997871, null, -7.682464145165789, -8.615378446519872, null, -7.682464145165789, -7.025788821068154, null, -7.682464145165789, -7.780962224114481, null, -7.682464145165789, -7.835776677609554, null, -7.682464145165789, -7.854329332277808, null, -7.682464145165789, -6.730280415936092, null, -7.673649341631782, -8.277630086068925, null, -7.673649341631782, -7.081051725054351, null, -8.277630086068925, -8.240400616838228, null, -8.277630086068925, -7.550110208953292, null, -8.277630086068925, -7.266107655374866, null, -8.277630086068925, -8.920108649997871, null, -8.277630086068925, -8.615378446519872, null, -8.277630086068925, -8.640422387982563, null, -8.277630086068925, -7.854329332277808, null, -7.081051725054351, -6.791685867423961, null, -7.081051725054351, -7.025788821068154, null, -7.081051725054351, -7.835776677609554, null, -7.081051725054351, -7.854329332277808, null, -7.081051725054351, -6.730280415936092, null, -11.138154349312865, -10.796321847500408, null, -11.138154349312865, -10.447780529690334, null, -11.138154349312865, -11.040089544440615, null, -11.138154349312865, -10.170515439130138, null, -11.138154349312865, -10.882381210483814, null, -10.796321847500408, -10.766401717945282, null, -10.447780529690334, -10.766401717945282, null, -10.447780529690334, -11.856669246239063, null, -10.447780529690334, -11.182955166122495, null, -10.447780529690334, -10.201088596355074, null, -10.447780529690334, -10.070910886072811, null, -10.447780529690334, -10.464186795405583, null, -11.040089544440615, -10.766401717945282, null, -11.040089544440615, -11.856669246239063, null, -11.040089544440615, -12.032050915546549, null, -11.040089544440615, -10.464186795405583, null, -10.170515439130138, -10.766401717945282, null, -10.170515439130138, -10.201088596355074, null, -10.882381210483814, -11.856669246239063, null, -10.882381210483814, -12.032050915546549, null, -10.882381210483814, -10.201088596355074, null, -10.882381210483814, -9.89496090050454, null, -10.766401717945282, -10.985959065371647, null, -10.766401717945282, -11.23057180241766, null, -10.766401717945282, -11.148475612023322, null, -10.766401717945282, -11.332788491280995, null, -10.766401717945282, -10.630942014397295, null, -10.766401717945282, -9.3067140404491, null, -10.766401717945282, -9.799142568928206, null, -10.766401717945282, -11.300217290220951, null, -10.766401717945282, -10.062566845108101, null, -10.766401717945282, -9.448112915041362, null, -10.985959065371647, -12.032512390853856, null, -10.985959065371647, -11.856669246239063, null, -10.985959065371647, -11.893440087256714, null, -10.985959065371647, -11.182955166122495, null, -10.985959065371647, -12.032050915546549, null, -10.985959065371647, -9.89496090050454, null, -10.985959065371647, -10.464186795405583, null, -11.23057180241766, -11.856669246239063, null, -11.23057180241766, -12.032050915546549, null, -11.23057180241766, -10.464186795405583, null, -11.148475612023322, -11.856669246239063, null, -11.148475612023322, -12.032050915546549, null, -11.148475612023322, -10.464186795405583, null, -11.332788491280995, -12.032512390853856, null, -11.332788491280995, -11.856669246239063, null, -11.332788491280995, -11.893440087256714, null, -11.332788491280995, -12.032050915546549, null, -11.332788491280995, -10.464186795405583, null, -9.3067140404491, -9.89496090050454, null, -9.799142568928206, -10.464186795405583, null, -11.300217290220951, -11.856669246239063, null, -11.300217290220951, -11.893440087256714, null, -11.300217290220951, -12.032050915546549, null, -11.300217290220951, -10.464186795405583, null, -10.062566845108101, -10.464186795405583, null, -9.448112915041362, -9.89496090050454, null, -9.448112915041362, -10.464186795405583, null, -12.032512390853856, -12.637325364379437, null, -12.032512390853856, -12.802924556349542, null, -12.032512390853856, -13.401184986122892, null, -12.032512390853856, -11.906881258851046, null, -12.032512390853856, -11.973026033494978, null, -12.032512390853856, -12.29030671730406, null, -12.032512390853856, -12.160304083520177, null, -12.032512390853856, -12.662347264607206, null, -12.032512390853856, -12.803596347078745, null, -12.032512390853856, -13.234330168387816, null, -12.032512390853856, -13.09648408446182, null, -12.032512390853856, -11.479199095794973, null, -12.802924556349542, -12.032050915546549, null, -11.479199095794973, -11.856669246239063, null, -11.479199095794973, -12.032050915546549, null, -11.479199095794973, -10.464186795405583, null, -11.856669246239063, -13.16546109640478, null, -11.856669246239063, -12.491834157022877, null, -11.856669246239063, -12.7075197138608, null, -11.856669246239063, -12.797429131803527, null, -11.856669246239063, -12.717121881102418, null, -11.856669246239063, -10.610614733918014, null, -11.856669246239063, -13.047888319668871, null, -11.856669246239063, -11.494933523446086, null, -11.856669246239063, -12.700510501881626, null, -11.856669246239063, -11.512543955710052, null, -11.856669246239063, -11.463556039029827, null, -11.856669246239063, -13.191756943968068, null, -11.856669246239063, -11.490580917482493, null, -11.856669246239063, -12.33640370047084, null, -13.16546109640478, -12.032050915546549, null, -10.610614733918014, -11.182955166122495, null, -10.610614733918014, -10.464186795405583, null, -13.047888319668871, -12.032050915546549, null, -11.494933523446086, -12.032050915546549, null, -11.494933523446086, -10.464186795405583, null, -11.512543955710052, -12.032050915546549, null, -11.512543955710052, -10.464186795405583, null, -11.463556039029827, -12.032050915546549, null, -11.463556039029827, -10.464186795405583, null, -13.191756943968068, -12.032050915546549, null, -11.490580917482493, -12.032050915546549, null, -11.490580917482493, -10.464186795405583, null, -11.182955166122495, -10.31452879782927, null, -11.182955166122495, -10.712081330726395, null, -11.182955166122495, -10.290138287075145, null, -11.182955166122495, -10.798216365701604, null, -11.182955166122495, -10.568118647562892, null, -11.182955166122495, -11.253322956817312, null, -11.182955166122495, -10.41647662370631, null, -11.182955166122495, -11.743850555961624, null, -11.182955166122495, -10.276478912523183, null, -11.182955166122495, -10.934288960718463, null, -11.182955166122495, -12.232582270122295, null, -11.182955166122495, -11.710101214776179, null, -11.182955166122495, -11.610127977553239, null, -11.182955166122495, -10.788397645011516, null, -11.182955166122495, -12.10841554667447, null, -11.182955166122495, -9.917701346887661, null, -11.182955166122495, -11.370402996561253, null, -11.182955166122495, -11.219060722097353, null, -11.182955166122495, -11.996557960949907, null, -11.182955166122495, -11.172471135670124, null, -9.917701346887661, -9.89496090050454, null, -5.639642898646767, -5.455246987888097, null, -8.920108649997871, -8.790295777780484, null, -8.920108649997871, -9.954874619081334, null, -8.920108649997871, -9.764266075769775, null, -8.790295777780484, -7.780962224114481, null, -8.790295777780484, -7.835776677609554, null, -6.529006215135621, -7.047465528476751, null, -9.919752232792149, -9.035911564593286, null, -12.032050915546549, -12.704274338850142, null, -12.032050915546549, -13.086399000923775, null, -12.032050915546549, -13.278988028162084, null, -10.201088596355074, -8.92755812814514, null, -10.201088596355074, -9.22420092188988, null, -9.89496090050454, -8.6397455772732, null, -9.89496090050454, -8.871473944796485, null, -9.89496090050454, -8.53604719295397, null, -9.89496090050454, -9.260080626057391, null, -9.89496090050454, -9.033333505095914, null, -9.89496090050454, -8.688567993017202, null, -9.89496090050454, -9.341867946067223, null, -9.89496090050454, -9.061732299610126, null, -9.89496090050454, -8.847432446592192, null, -9.260080626057391, -10.464186795405583, null, -9.341867946067223, -10.576512776369576, null, -9.341867946067223, -10.464186795405583, null, -10.464186795405583, -10.299805490471993, null, -10.464186795405583, -10.759348416148965, null, -10.464186795405583, -9.258995180865297, null, -10.464186795405583, -10.068371954906633, null, -10.464186795405583, -9.355360988383884, null, -10.464186795405583, -10.264203450596163, null, -10.464186795405583, -10.13347126069284, null, -10.464186795405583, -9.97664053001623, null, -10.464186795405583, -9.451577501242996, null, -10.464186795405583, -9.376681514821563, null, -10.464186795405583, -9.776894892920417, null, -10.464186795405583, -9.627650591140467, null, -10.464186795405583, -10.357800904643193, null, -10.464186795405583, -10.668595643696944, null, -10.464186795405583, -9.659024044914831, null, -10.464186795405583, -10.714447407286265, null, -10.464186795405583, -9.50923145219351, null, -10.464186795405583, -9.190480247307221, null, -10.464186795405583, -10.317974953130273, null, -10.464186795405583, -9.372486354694724, null, -10.464186795405583, -9.154413612167595, null, -10.464186795405583, -9.754518847561046, null, -10.464186795405583, -10.620395644101233, null, -10.464186795405583, -9.688378890618791, null, -10.464186795405583, -9.916881028209863, null, -10.464186795405583, -10.51648741996741, null, -10.464186795405583, -10.178155602420341, null, -9.50923145219351, -8.64517709085165, null, -8.64517709085165, -8.408913813554543, null, -8.64517709085165, -8.158319487237922, null, -8.64517709085165, -7.402867263120122, null], &quot;y&quot;: [-13.384902175698175, -12.629733158054055, null, -12.629733158054055, -13.28137384149981, null, -12.629733158054055, -11.594758410431783, null, -12.629733158054055, -11.685252631540795, null, -12.629733158054055, -12.090080787959831, null, -12.629733158054055, -11.596043443007156, null, -12.629733158054055, -13.03665021431799, null, -12.629733158054055, -12.030346616284882, null, -10.367272134905159, -9.373025498824862, null, -10.367272134905159, -11.602573414368099, null, -10.367272134905159, -10.88114676390846, null, -10.367272134905159, -11.282547127264253, null, -10.367272134905159, -9.302383691973516, null, -10.367272134905159, -11.404520243490914, null, -10.367272134905159, -10.62695859278491, null, -10.367272134905159, -9.28079882257484, null, -10.367272134905159, -9.621632864330127, null, -10.367272134905159, -11.150209314365313, null, -10.367272134905159, -9.696575060960466, null, -10.367272134905159, -10.11250272866262, null, -10.367272134905159, -11.031895450748728, null, -10.367272134905159, -10.468883193294658, null, -10.367272134905159, -9.910858511296668, null, -10.367272134905159, -11.356117533386417, null, -10.367272134905159, -10.993916503753278, null, -10.367272134905159, -11.258743241720508, null, -10.367272134905159, -10.776600662305324, null, -10.367272134905159, -9.347500079787453, null, -10.367272134905159, -11.357130021810509, null, -10.367272134905159, -11.146655486374925, null, -10.367272134905159, -10.87561234266761, null, -10.367272134905159, -9.094855866597651, null, -10.367272134905159, -10.441148935745423, null, -10.367272134905159, -10.285384643949351, null, -10.367272134905159, -9.28844382984708, null, -10.367272134905159, -11.005719279973325, null, -10.367272134905159, -10.317409387994424, null, -10.367272134905159, -10.537784637072374, null, -10.367272134905159, -10.759452353173621, null, -10.367272134905159, -10.625938297198852, null, -10.367272134905159, -11.164794083266093, null, -10.367272134905159, -9.442860905057456, null, -10.367272134905159, -10.462532515587387, null, -10.367272134905159, -9.516070717988994, null, -10.367272134905159, -9.339833039117377, null, -10.367272134905159, -11.249128338639615, null, -10.367272134905159, -11.242858373025474, null, -10.367272134905159, -9.129240893616371, null, -10.367272134905159, -11.21729624470927, null, -10.367272134905159, -10.154085774620917, null, -10.367272134905159, -9.769963266508876, null, -10.367272134905159, -11.130362822000775, null, -10.367272134905159, -10.069768421916248, null, -10.367272134905159, -9.267431574158978, null, -10.367272134905159, -9.847224316012172, null, -10.367272134905159, -9.9007473544958, null, -10.367272134905159, -9.378589568266378, null, -10.367272134905159, -9.594881556332313, null, -10.367272134905159, -10.199290088499765, null, -10.367272134905159, -9.692918224146691, null, -10.367272134905159, -9.522775498049793, null, -10.367272134905159, -11.637528007907875, null, -10.367272134905159, -10.997276050908807, null, -10.367272134905159, -10.800295031444305, null, -10.367272134905159, -11.146664773016516, null, -10.367272134905159, -11.37613611803721, null, -10.367272134905159, -9.563334699117284, null, -10.367272134905159, -9.18123793411783, null, -11.602573414368099, -11.910271342067619, null, -11.602573414368099, -12.033634549867996, null, -11.602573414368099, -11.969929660478181, null, -11.602573414368099, -10.621643282129533, null, -11.602573414368099, -12.136823006694014, null, -10.88114676390846, -11.52399145378177, null, -10.88114676390846, -11.910271342067619, null, -10.88114676390846, -11.705984402431604, null, -10.88114676390846, -12.033634549867996, null, -10.88114676390846, -11.747048543358076, null, -10.88114676390846, -10.237970047589481, null, -10.88114676390846, -11.969929660478181, null, -10.88114676390846, -10.998978623567265, null, -10.88114676390846, -10.730610364970712, null, -11.282547127264253, -12.033634549867996, null, -11.404520243490914, -11.52399145378177, null, -11.404520243490914, -11.910271342067619, null, -11.404520243490914, -11.705984402431604, null, -11.404520243490914, -12.033634549867996, null, -11.404520243490914, -10.237970047589481, null, -11.404520243490914, -11.969929660478181, null, -11.404520243490914, -12.136823006694014, null, -10.62695859278491, -11.705984402431604, null, -10.62695859278491, -10.237970047589481, null, -10.62695859278491, -11.969929660478181, null, -9.28079882257484, -10.237970047589481, null, -11.150209314365313, -11.52399145378177, null, -11.150209314365313, -11.910271342067619, null, -11.150209314365313, -12.033634549867996, null, -11.150209314365313, -11.747048543358076, null, -11.150209314365313, -10.237970047589481, null, -11.150209314365313, -11.969929660478181, null, -11.150209314365313, -10.998978623567265, null, -11.150209314365313, -10.730610364970712, null, -11.150209314365313, -11.428614262414452, null, -11.150209314365313, -12.136823006694014, null, -11.031895450748728, -11.52399145378177, null, -11.031895450748728, -11.910271342067619, null, -11.031895450748728, -11.705984402431604, null, -11.031895450748728, -12.033634549867996, null, -11.031895450748728, -10.237970047589481, null, -11.031895450748728, -11.969929660478181, null, -11.356117533386417, -12.033634549867996, null, -11.356117533386417, -11.747048543358076, null, -11.356117533386417, -11.969929660478181, null, -10.993916503753278, -11.910271342067619, null, -10.993916503753278, -12.033634549867996, null, -10.993916503753278, -11.747048543358076, null, -10.993916503753278, -10.237970047589481, null, -10.993916503753278, -10.269115474302783, null, -10.993916503753278, -10.730610364970712, null, -10.993916503753278, -10.621643282129533, null, -10.993916503753278, -12.136823006694014, null, -11.258743241720508, -11.52399145378177, null, -11.258743241720508, -11.910271342067619, null, -11.258743241720508, -11.705984402431604, null, -11.258743241720508, -12.033634549867996, null, -11.258743241720508, -11.747048543358076, null, -11.258743241720508, -10.237970047589481, null, -11.258743241720508, -11.969929660478181, null, -11.258743241720508, -10.730610364970712, null, -11.258743241720508, -10.621643282129533, null, -11.258743241720508, -12.136823006694014, null, -10.776600662305324, -11.910271342067619, null, -10.776600662305324, -10.237970047589481, null, -10.776600662305324, -10.998978623567265, null, -10.776600662305324, -12.136823006694014, null, -9.347500079787453, -10.237970047589481, null, -11.357130021810509, -11.910271342067619, null, -11.357130021810509, -11.705984402431604, null, -11.357130021810509, -12.033634549867996, null, -11.357130021810509, -11.747048543358076, null, -11.357130021810509, -10.237970047589481, null, -11.357130021810509, -11.969929660478181, null, -11.357130021810509, -12.136823006694014, null, -11.146655486374925, -11.52399145378177, null, -11.146655486374925, -11.910271342067619, null, -11.146655486374925, -12.033634549867996, null, -11.146655486374925, -10.237970047589481, null, -11.146655486374925, -11.969929660478181, null, -11.146655486374925, -10.730610364970712, null, -11.146655486374925, -12.136823006694014, null, -10.87561234266761, -11.705984402431604, null, -10.87561234266761, -12.033634549867996, null, -10.87561234266761, -10.237970047589481, null, -10.87561234266761, -11.969929660478181, null, -9.28844382984708, -10.237970047589481, null, -11.005719279973325, -11.52399145378177, null, -11.005719279973325, -11.910271342067619, null, -11.005719279973325, -12.033634549867996, null, -11.005719279973325, -10.237970047589481, null, -11.005719279973325, -10.998978623567265, null, -11.005719279973325, -10.730610364970712, null, -11.005719279973325, -10.621643282129533, null, -11.005719279973325, -12.136823006694014, null, -10.759452353173621, -11.910271342067619, null, -10.759452353173621, -10.237970047589481, null, -10.759452353173621, -10.730610364970712, null, -10.759452353173621, -12.136823006694014, null, -10.625938297198852, -10.237970047589481, null, -10.625938297198852, -10.998978623567265, null, -10.625938297198852, -10.730610364970712, null, -10.625938297198852, -12.136823006694014, null, -11.164794083266093, -11.969929660478181, null, -9.442860905057456, -10.237970047589481, null, -10.462532515587387, -11.52399145378177, null, -10.462532515587387, -10.237970047589481, null, -10.462532515587387, -11.969929660478181, null, -11.249128338639615, -11.910271342067619, null, -11.249128338639615, -12.033634549867996, null, -11.249128338639615, -10.237970047589481, null, -11.249128338639615, -11.969929660478181, null, -11.249128338639615, -12.136823006694014, null, -11.242858373025474, -12.033634549867996, null, -11.242858373025474, -11.969929660478181, null, -11.21729624470927, -11.52399145378177, null, -11.21729624470927, -11.910271342067619, null, -11.21729624470927, -11.705984402431604, null, -11.21729624470927, -12.033634549867996, null, -11.21729624470927, -11.747048543358076, null, -11.21729624470927, -10.237970047589481, null, -11.21729624470927, -11.969929660478181, null, -11.21729624470927, -10.998978623567265, null, -11.21729624470927, -10.730610364970712, null, -11.21729624470927, -10.621643282129533, null, -11.21729624470927, -11.428614262414452, null, -11.21729624470927, -12.136823006694014, null, -11.130362822000775, -12.033634549867996, null, -11.130362822000775, -11.747048543358076, null, -11.130362822000775, -11.428614262414452, null, -9.267431574158978, -10.237970047589481, null, -9.594881556332313, -10.237970047589481, null, -9.594881556332313, -10.730610364970712, null, -11.637528007907875, -12.033634549867996, null, -11.637528007907875, -11.969929660478181, null, -11.637528007907875, -12.136823006694014, null, -10.997276050908807, -10.730610364970712, null, -10.997276050908807, -12.136823006694014, null, -10.800295031444305, -11.910271342067619, null, -10.800295031444305, -11.705984402431604, null, -10.800295031444305, -10.237970047589481, null, -10.800295031444305, -11.969929660478181, null, -11.146664773016516, -11.705984402431604, null, -11.146664773016516, -12.033634549867996, null, -11.146664773016516, -11.747048543358076, null, -11.146664773016516, -10.237970047589481, null, -11.146664773016516, -11.969929660478181, null, -11.146664773016516, -10.998978623567265, null, -11.146664773016516, -10.730610364970712, null, -11.146664773016516, -12.136823006694014, null, -11.37613611803721, -11.910271342067619, null, -11.37613611803721, -11.705984402431604, null, -11.37613611803721, -12.033634549867996, null, -11.37613611803721, -10.237970047589481, null, -11.37613611803721, -11.969929660478181, null, -11.37613611803721, -12.136823006694014, null, -9.563334699117284, -10.237970047589481, null, -13.28137384149981, -12.143133197738173, null, -12.143133197738173, -11.6025703394729, null, -12.143133197738173, -11.685252631540795, null, -12.143133197738173, -10.747022995682245, null, -12.143133197738173, -10.963254510501423, null, -12.143133197738173, -12.090080787959831, null, -12.143133197738173, -11.596043443007156, null, -12.143133197738173, -12.92013424010904, null, -12.143133197738173, -13.47949494712418, null, -12.143133197738173, -13.03665021431799, null, -12.143133197738173, -12.030346616284882, null, -12.143133197738173, -12.172527991722532, null, -11.594758410431783, -10.904396316988416, null, -11.594758410431783, -12.372430504143095, null, -10.904396316988416, -11.685252631540795, null, -10.904396316988416, -10.747022995682245, null, -10.904396316988416, -10.963254510501423, null, -10.904396316988416, -12.090080787959831, null, -10.904396316988416, -11.596043443007156, null, -10.904396316988416, -9.876285596621786, null, -10.904396316988416, -12.030346616284882, null, -12.372430504143095, -11.6025703394729, null, -12.372430504143095, -12.92013424010904, null, -12.372430504143095, -13.03665021431799, null, -12.372430504143095, -12.030346616284882, null, -12.372430504143095, -12.172527991722532, null, -11.52399145378177, -12.487681283108099, null, -11.52399145378177, -11.468780223660666, null, -11.52399145378177, -12.844995416200627, null, -11.52399145378177, -11.928239305224263, null, -11.52399145378177, -12.129922884343516, null, -12.487681283108099, -11.910271342067619, null, -11.468780223660666, -11.910271342067619, null, -11.468780223660666, -12.033634549867996, null, -11.468780223660666, -10.237970047589481, null, -11.468780223660666, -10.998978623567265, null, -11.468780223660666, -10.621643282129533, null, -11.468780223660666, -12.136823006694014, null, -12.844995416200627, -11.910271342067619, null, -12.844995416200627, -12.033634549867996, null, -12.844995416200627, -11.969929660478181, null, -12.844995416200627, -12.136823006694014, null, -11.928239305224263, -11.910271342067619, null, -11.928239305224263, -10.998978623567265, null, -12.129922884343516, -12.033634549867996, null, -12.129922884343516, -11.969929660478181, null, -12.129922884343516, -10.998978623567265, null, -12.129922884343516, -10.730610364970712, null, -11.910271342067619, -11.64045105079954, null, -11.910271342067619, -12.907450807681036, null, -11.910271342067619, -13.005486237310796, null, -11.910271342067619, -12.719091722890871, null, -11.910271342067619, -12.987189285188052, null, -11.910271342067619, -11.42414159485315, null, -11.910271342067619, -12.697987945288622, null, -11.910271342067619, -12.851658795816618, null, -11.910271342067619, -12.947267232229764, null, -11.910271342067619, -11.93539775542244, null, -11.64045105079954, -11.705984402431604, null, -11.64045105079954, -12.033634549867996, null, -11.64045105079954, -11.747048543358076, null, -11.64045105079954, -10.237970047589481, null, -11.64045105079954, -11.969929660478181, null, -11.64045105079954, -10.730610364970712, null, -11.64045105079954, -12.136823006694014, null, -12.907450807681036, -12.033634549867996, null, -12.907450807681036, -11.969929660478181, null, -12.907450807681036, -12.136823006694014, null, -13.005486237310796, -12.033634549867996, null, -13.005486237310796, -11.969929660478181, null, -13.005486237310796, -12.136823006694014, null, -12.719091722890871, -11.705984402431604, null, -12.719091722890871, -12.033634549867996, null, -12.719091722890871, -11.747048543358076, null, -12.719091722890871, -11.969929660478181, null, -12.719091722890871, -12.136823006694014, null, -11.42414159485315, -10.730610364970712, null, -12.697987945288622, -12.136823006694014, null, -12.851658795816618, -12.033634549867996, null, -12.851658795816618, -11.747048543358076, null, -12.851658795816618, -11.969929660478181, null, -12.851658795816618, -12.136823006694014, null, -12.947267232229764, -12.136823006694014, null, -11.93539775542244, -10.730610364970712, null, -11.93539775542244, -12.136823006694014, null, -11.705984402431604, -12.017250596639014, null, -11.705984402431604, -12.55931623382803, null, -11.705984402431604, -11.55864506374902, null, -11.705984402431604, -12.05193715280981, null, -11.705984402431604, -12.548789159844082, null, -11.705984402431604, -12.848756671747156, null, -11.705984402431604, -11.54984318156282, null, -11.705984402431604, -11.321814644274825, null, -11.705984402431604, -12.541271842618238, null, -11.705984402431604, -12.058027113026467, null, -11.705984402431604, -11.319824884032721, null, -11.705984402431604, -12.846235294833068, null, -12.55931623382803, -11.969929660478181, null, -12.846235294833068, -12.033634549867996, null, -12.846235294833068, -11.969929660478181, null, -12.846235294833068, -12.136823006694014, null, -12.033634549867996, -12.318086916861514, null, -12.033634549867996, -13.312271312499254, null, -12.033634549867996, -12.885951953095834, null, -12.033634549867996, -12.933348713964222, null, -12.033634549867996, -13.094200533012826, null, -12.033634549867996, -11.664003183655428, null, -12.033634549867996, -12.421575827144602, null, -12.033634549867996, -12.572742017656196, null, -12.033634549867996, -12.60034221448301, null, -12.033634549867996, -12.713627559064006, null, -12.033634549867996, -12.970646905137492, null, -12.033634549867996, -12.190618211284727, null, -12.033634549867996, -12.8459691924404, null, -12.033634549867996, -13.273278120476453, null, -12.318086916861514, -11.969929660478181, null, -11.664003183655428, -10.237970047589481, null, -11.664003183655428, -12.136823006694014, null, -12.421575827144602, -11.969929660478181, null, -12.572742017656196, -11.969929660478181, null, -12.572742017656196, -12.136823006694014, null, -12.713627559064006, -11.969929660478181, null, -12.713627559064006, -12.136823006694014, null, -12.970646905137492, -11.969929660478181, null, -12.970646905137492, -12.136823006694014, null, -12.190618211284727, -11.969929660478181, null, -12.8459691924404, -11.969929660478181, null, -12.8459691924404, -12.136823006694014, null, -10.237970047589481, -9.799254033561693, null, -10.237970047589481, -9.17991281986953, null, -10.237970047589481, -9.463439596622951, null, -10.237970047589481, -9.601732835053019, null, -10.237970047589481, -10.071902956916626, null, -10.237970047589481, -9.81004932228846, null, -10.237970047589481, -9.039562040371914, null, -10.237970047589481, -10.11628197404159, null, -10.237970047589481, -9.215789584960353, null, -10.237970047589481, -10.241839840247899, null, -10.237970047589481, -9.682364149702508, null, -10.237970047589481, -9.587219869355181, null, -10.237970047589481, -9.112030110066755, null, -10.237970047589481, -8.922290593714147, null, -10.237970047589481, -9.985440530296804, null, -10.237970047589481, -9.776579899076456, null, -10.237970047589481, -10.287813224145465, null, -10.237970047589481, -9.292883917512217, null, -10.237970047589481, -9.342491177700241, null, -10.237970047589481, -8.95556835077808, null, -9.776579899076456, -10.730610364970712, null, -9.91217140036119, -10.785613100802967, null, -12.090080787959831, -13.45217794954232, null, -12.090080787959831, -12.368406502192045, null, -12.090080787959831, -11.420437412434705, null, -13.45217794954232, -13.47949494712418, null, -13.45217794954232, -13.03665021431799, null, -7.974627534527816, -7.493559050847265, null, -10.269115474302783, -9.655411435306217, null, -11.969929660478181, -13.05194393239898, null, -11.969929660478181, -12.893252510653593, null, -11.969929660478181, -12.38633705378811, null, -10.998978623567265, -10.075945686358592, null, -10.998978623567265, -10.747176894427106, null, -10.730610364970712, -10.291696313536455, null, -10.730610364970712, -10.099922298663458, null, -10.730610364970712, -10.55680473479271, null, -10.730610364970712, -11.565391989675511, null, -10.730610364970712, -9.577579989836575, null, -10.730610364970712, -10.442954029877113, null, -10.730610364970712, -11.721822848633614, null, -10.730610364970712, -9.668929617072237, null, -10.730610364970712, -9.89363843946089, null, -11.565391989675511, -12.136823006694014, null, -11.721822848633614, -11.428614262414452, null, -11.721822848633614, -12.136823006694014, null, -12.136823006694014, -12.011737979525229, null, -12.136823006694014, -12.70331741287901, null, -12.136823006694014, -12.541807517780502, null, -12.136823006694014, -13.320155500000297, null, -12.136823006694014, -12.619851763361956, null, -12.136823006694014, -12.83105937905384, null, -12.136823006694014, -13.363863941120874, null, -12.136823006694014, -11.869174719671262, null, -12.136823006694014, -12.787418919536725, null, -12.136823006694014, -12.281634794385395, null, -12.136823006694014, -13.141673916158268, null, -12.136823006694014, -12.088587682787379, null, -12.136823006694014, -13.48411252030969, null, -12.136823006694014, -12.341421342114957, null, -12.136823006694014, -11.7186417880566, null, -12.136823006694014, -13.032537619431045, null, -12.136823006694014, -13.13193042812604, null, -12.136823006694014, -12.031828641708044, null, -12.136823006694014, -12.391518184463603, null, -12.136823006694014, -11.780396540916772, null, -12.136823006694014, -12.29162843642722, null, -12.136823006694014, -12.998742920307908, null, -12.136823006694014, -13.29840207037762, null, -12.136823006694014, -12.672598431629943, null, -12.136823006694014, -12.423417083226456, null, -12.136823006694014, -13.459764446973185, null, -12.136823006694014, -13.133699659592155, null, -13.13193042812604, -14.087566314670049, null, -14.087566314670049, -15.210023253442833, null, -14.087566314670049, -14.918884533634118, null, -14.087566314670049, -14.195612879693275, null], &quot;z&quot;: [8.406915134303027, 8.321056196313904, null, 8.321056196313904, 7.774401844510422, null, 8.321056196313904, 7.912687509149766, null, 8.321056196313904, 8.326383621643991, null, 8.321056196313904, 8.409196687003794, null, 8.321056196313904, 8.393478383942588, null, 8.321056196313904, 7.692229271007524, null, 8.321056196313904, 8.14041560527225, null, 2.7862268494721967, 2.1897873829300383, null, 2.7862268494721967, 2.4435107137308782, null, 2.7862268494721967, 3.983979497075568, null, 2.7862268494721967, 2.101345355890599, null, 2.7862268494721967, 2.251959271026674, null, 2.7862268494721967, 3.5981554041826316, null, 2.7862268494721967, 3.967761077915809, null, 2.7862268494721967, 3.2871192190418137, null, 2.7862268494721967, 3.086026265953982, null, 2.7862268494721967, 3.368954095564839, null, 2.7862268494721967, 1.8118077983205096, null, 2.7862268494721967, 1.637378118300458, null, 2.7862268494721967, 3.977208066496437, null, 2.7862268494721967, 1.4489353681642265, null, 2.7862268494721967, 3.1584841757923443, null, 2.7862268494721967, 2.661687581409254, null, 2.7862268494721967, 2.9047127387868854, null, 2.7862268494721967, 3.486271555012652, null, 2.7862268494721967, 3.1896334325336784, null, 2.7862268494721967, 3.5708707174453505, null, 2.7862268494721967, 3.4710707208746605, null, 2.7862268494721967, 3.096039548878412, null, 2.7862268494721967, 3.8251148584985017, null, 2.7862268494721967, 2.53042499027358, null, 2.7862268494721967, 1.7988605548417063, null, 2.7862268494721967, 2.469085036267669, null, 2.7862268494721967, 3.4746081891516614, null, 2.7862268494721967, 3.2365907151206073, null, 2.7862268494721967, 2.1011544833809106, null, 2.7862268494721967, 1.5725162069184329, null, 2.7862268494721967, 2.929683394183835, null, 2.7862268494721967, 3.020276910371866, null, 2.7862268494721967, 2.354101584910928, null, 2.7862268494721967, 3.6574002710402294, null, 2.7862268494721967, 3.746686484032972, null, 2.7862268494721967, 1.9690339449195369, null, 2.7862268494721967, 2.0693646056869612, null, 2.7862268494721967, 2.9525210936954833, null, 2.7862268494721967, 2.7623742689466044, null, 2.7862268494721967, 2.448260887389385, null, 2.7862268494721967, 3.664595587899626, null, 2.7862268494721967, 2.867902439182499, null, 2.7862268494721967, 1.726610879050419, null, 2.7862268494721967, 3.037522516520478, null, 2.7862268494721967, 1.5269732418518362, null, 2.7862268494721967, 3.3863710368751616, null, 2.7862268494721967, 2.53563332722097, null, 2.7862268494721967, 2.0063848003283535, null, 2.7862268494721967, 2.916418225650652, null, 2.7862268494721967, 3.2406558322764654, null, 2.7862268494721967, 1.4720138016963065, null, 2.7862268494721967, 1.7126046885244863, null, 2.7862268494721967, 2.406407677301235, null, 2.7862268494721967, 2.1959957126223304, null, 2.7862268494721967, 2.192237005542832, null, 2.7862268494721967, 4.083493374497236, null, 2.7862268494721967, 3.5603138022380967, null, 2.7862268494721967, 3.371341872222347, null, 2.7862268494721967, 3.7394749623187304, null, 2.7862268494721967, 2.690625849575399, null, 2.4435107137308782, 3.911356996045978, null, 2.4435107137308782, 3.208796234417193, null, 2.4435107137308782, 3.420276467613236, null, 2.4435107137308782, 3.0073224960306058, null, 2.4435107137308782, 2.8332105366651184, null, 3.983979497075568, 4.563641416151821, null, 3.983979497075568, 3.911356996045978, null, 3.983979497075568, 4.657298901737561, null, 3.983979497075568, 3.208796234417193, null, 3.983979497075568, 3.9249004000123118, null, 3.983979497075568, 4.12879181756165, null, 3.983979497075568, 3.420276467613236, null, 3.983979497075568, 4.377004938461889, null, 3.983979497075568, 3.510124429706414, null, 2.101345355890599, 3.208796234417193, null, 3.5981554041826316, 4.563641416151821, null, 3.5981554041826316, 3.911356996045978, null, 3.5981554041826316, 4.657298901737561, null, 3.5981554041826316, 3.208796234417193, null, 3.5981554041826316, 4.12879181756165, null, 3.5981554041826316, 3.420276467613236, null, 3.5981554041826316, 2.8332105366651184, null, 3.967761077915809, 4.657298901737561, null, 3.967761077915809, 4.12879181756165, null, 3.967761077915809, 3.420276467613236, null, 3.2871192190418137, 4.12879181756165, null, 3.368954095564839, 4.563641416151821, null, 3.368954095564839, 3.911356996045978, null, 3.368954095564839, 3.208796234417193, null, 3.368954095564839, 3.9249004000123118, null, 3.368954095564839, 4.12879181756165, null, 3.368954095564839, 3.420276467613236, null, 3.368954095564839, 4.377004938461889, null, 3.368954095564839, 3.510124429706414, null, 3.368954095564839, 4.622905057695846, null, 3.368954095564839, 2.8332105366651184, null, 3.977208066496437, 4.563641416151821, null, 3.977208066496437, 3.911356996045978, null, 3.977208066496437, 4.657298901737561, null, 3.977208066496437, 3.208796234417193, null, 3.977208066496437, 4.12879181756165, null, 3.977208066496437, 3.420276467613236, null, 2.661687581409254, 3.208796234417193, null, 2.661687581409254, 3.9249004000123118, null, 2.661687581409254, 3.420276467613236, null, 2.9047127387868854, 3.911356996045978, null, 2.9047127387868854, 3.208796234417193, null, 2.9047127387868854, 3.9249004000123118, null, 2.9047127387868854, 4.12879181756165, null, 2.9047127387868854, 1.8417680803781449, null, 2.9047127387868854, 3.510124429706414, null, 2.9047127387868854, 3.0073224960306058, null, 2.9047127387868854, 2.8332105366651184, null, 3.486271555012652, 4.563641416151821, null, 3.486271555012652, 3.911356996045978, null, 3.486271555012652, 4.657298901737561, null, 3.486271555012652, 3.208796234417193, null, 3.486271555012652, 3.9249004000123118, null, 3.486271555012652, 4.12879181756165, null, 3.486271555012652, 3.420276467613236, null, 3.486271555012652, 3.510124429706414, null, 3.486271555012652, 3.0073224960306058, null, 3.486271555012652, 2.8332105366651184, null, 3.1896334325336784, 3.911356996045978, null, 3.1896334325336784, 4.12879181756165, null, 3.1896334325336784, 4.377004938461889, null, 3.1896334325336784, 2.8332105366651184, null, 3.5708707174453505, 4.12879181756165, null, 3.4710707208746605, 3.911356996045978, null, 3.4710707208746605, 4.657298901737561, null, 3.4710707208746605, 3.208796234417193, null, 3.4710707208746605, 3.9249004000123118, null, 3.4710707208746605, 4.12879181756165, null, 3.4710707208746605, 3.420276467613236, null, 3.4710707208746605, 2.8332105366651184, null, 3.096039548878412, 4.563641416151821, null, 3.096039548878412, 3.911356996045978, null, 3.096039548878412, 3.208796234417193, null, 3.096039548878412, 4.12879181756165, null, 3.096039548878412, 3.420276467613236, null, 3.096039548878412, 3.510124429706414, null, 3.096039548878412, 2.8332105366651184, null, 3.8251148584985017, 4.657298901737561, null, 3.8251148584985017, 3.208796234417193, null, 3.8251148584985017, 4.12879181756165, null, 3.8251148584985017, 3.420276467613236, null, 3.4746081891516614, 4.12879181756165, null, 3.2365907151206073, 4.563641416151821, null, 3.2365907151206073, 3.911356996045978, null, 3.2365907151206073, 3.208796234417193, null, 3.2365907151206073, 4.12879181756165, null, 3.2365907151206073, 4.377004938461889, null, 3.2365907151206073, 3.510124429706414, null, 3.2365907151206073, 3.0073224960306058, null, 3.2365907151206073, 2.8332105366651184, null, 2.929683394183835, 3.911356996045978, null, 2.929683394183835, 4.12879181756165, null, 2.929683394183835, 3.510124429706414, null, 2.929683394183835, 2.8332105366651184, null, 3.020276910371866, 4.12879181756165, null, 3.020276910371866, 4.377004938461889, null, 3.020276910371866, 3.510124429706414, null, 3.020276910371866, 2.8332105366651184, null, 2.354101584910928, 3.420276467613236, null, 3.6574002710402294, 4.12879181756165, null, 3.746686484032972, 4.563641416151821, null, 3.746686484032972, 4.12879181756165, null, 3.746686484032972, 3.420276467613236, null, 2.9525210936954833, 3.911356996045978, null, 2.9525210936954833, 3.208796234417193, null, 2.9525210936954833, 4.12879181756165, null, 2.9525210936954833, 3.420276467613236, null, 2.9525210936954833, 2.8332105366651184, null, 2.7623742689466044, 3.208796234417193, null, 2.7623742689466044, 3.420276467613236, null, 3.664595587899626, 4.563641416151821, null, 3.664595587899626, 3.911356996045978, null, 3.664595587899626, 4.657298901737561, null, 3.664595587899626, 3.208796234417193, null, 3.664595587899626, 3.9249004000123118, null, 3.664595587899626, 4.12879181756165, null, 3.664595587899626, 3.420276467613236, null, 3.664595587899626, 4.377004938461889, null, 3.664595587899626, 3.510124429706414, null, 3.664595587899626, 3.0073224960306058, null, 3.664595587899626, 4.622905057695846, null, 3.664595587899626, 2.8332105366651184, null, 3.037522516520478, 3.208796234417193, null, 3.037522516520478, 3.9249004000123118, null, 3.037522516520478, 4.622905057695846, null, 3.3863710368751616, 4.12879181756165, null, 3.2406558322764654, 4.12879181756165, null, 3.2406558322764654, 3.510124429706414, null, 2.1959957126223304, 3.208796234417193, null, 2.1959957126223304, 3.420276467613236, null, 2.1959957126223304, 2.8332105366651184, null, 2.192237005542832, 3.510124429706414, null, 2.192237005542832, 2.8332105366651184, null, 4.083493374497236, 3.911356996045978, null, 4.083493374497236, 4.657298901737561, null, 4.083493374497236, 4.12879181756165, null, 4.083493374497236, 3.420276467613236, null, 3.5603138022380967, 4.657298901737561, null, 3.5603138022380967, 3.208796234417193, null, 3.5603138022380967, 3.9249004000123118, null, 3.5603138022380967, 4.12879181756165, null, 3.5603138022380967, 3.420276467613236, null, 3.5603138022380967, 4.377004938461889, null, 3.5603138022380967, 3.510124429706414, null, 3.5603138022380967, 2.8332105366651184, null, 3.371341872222347, 3.911356996045978, null, 3.371341872222347, 4.657298901737561, null, 3.371341872222347, 3.208796234417193, null, 3.371341872222347, 4.12879181756165, null, 3.371341872222347, 3.420276467613236, null, 3.371341872222347, 2.8332105366651184, null, 3.7394749623187304, 4.12879181756165, null, 7.774401844510422, 7.612199437952266, null, 7.612199437952266, 7.022144284346507, null, 7.612199437952266, 8.326383621643991, null, 7.612199437952266, 7.715121531479632, null, 7.612199437952266, 7.498458798812705, null, 7.612199437952266, 8.409196687003794, null, 7.612199437952266, 8.393478383942588, null, 7.612199437952266, 6.896515814777535, null, 7.612199437952266, 7.298796176344266, null, 7.612199437952266, 7.692229271007524, null, 7.612199437952266, 8.14041560527225, null, 7.612199437952266, 6.791953066577848, null, 7.912687509149766, 8.24710336971647, null, 7.912687509149766, 7.346108176883911, null, 8.24710336971647, 8.326383621643991, null, 8.24710336971647, 7.715121531479632, null, 8.24710336971647, 7.498458798812705, null, 8.24710336971647, 8.409196687003794, null, 8.24710336971647, 8.393478383942588, null, 8.24710336971647, 8.31099214422144, null, 8.24710336971647, 8.14041560527225, null, 7.346108176883911, 7.022144284346507, null, 7.346108176883911, 6.896515814777535, null, 7.346108176883911, 7.692229271007524, null, 7.346108176883911, 8.14041560527225, null, 7.346108176883911, 6.791953066577848, null, 4.563641416151821, 5.307051629224405, null, 4.563641416151821, 3.797803253871395, null, 4.563641416151821, 3.556358956763613, null, 4.563641416151821, 5.216164686517435, null, 4.563641416151821, 4.3579332799851365, null, 5.307051629224405, 3.911356996045978, null, 3.797803253871395, 3.911356996045978, null, 3.797803253871395, 3.208796234417193, null, 3.797803253871395, 4.12879181756165, null, 3.797803253871395, 4.377004938461889, null, 3.797803253871395, 3.0073224960306058, null, 3.797803253871395, 2.8332105366651184, null, 3.556358956763613, 3.911356996045978, null, 3.556358956763613, 3.208796234417193, null, 3.556358956763613, 3.420276467613236, null, 3.556358956763613, 2.8332105366651184, null, 5.216164686517435, 3.911356996045978, null, 5.216164686517435, 4.377004938461889, null, 4.3579332799851365, 3.208796234417193, null, 4.3579332799851365, 3.420276467613236, null, 4.3579332799851365, 4.377004938461889, null, 4.3579332799851365, 3.510124429706414, null, 3.911356996045978, 4.039637767975737, null, 3.911356996045978, 3.0268943641417683, null, 3.911356996045978, 3.2836451814533043, null, 3.911356996045978, 3.863389945760799, null, 3.911356996045978, 5.026783072747423, null, 3.911356996045978, 4.416656345060819, null, 3.911356996045978, 3.8022626325237967, null, 3.911356996045978, 3.254268358685542, null, 3.911356996045978, 3.8027893897937397, null, 3.911356996045978, 3.519152268041867, null, 4.039637767975737, 4.657298901737561, null, 4.039637767975737, 3.208796234417193, null, 4.039637767975737, 3.9249004000123118, null, 4.039637767975737, 4.12879181756165, null, 4.039637767975737, 3.420276467613236, null, 4.039637767975737, 3.510124429706414, null, 4.039637767975737, 2.8332105366651184, null, 3.0268943641417683, 3.208796234417193, null, 3.0268943641417683, 3.420276467613236, null, 3.0268943641417683, 2.8332105366651184, null, 3.2836451814533043, 3.208796234417193, null, 3.2836451814533043, 3.420276467613236, null, 3.2836451814533043, 2.8332105366651184, null, 3.863389945760799, 4.657298901737561, null, 3.863389945760799, 3.208796234417193, null, 3.863389945760799, 3.9249004000123118, null, 3.863389945760799, 3.420276467613236, null, 3.863389945760799, 2.8332105366651184, null, 4.416656345060819, 3.510124429706414, null, 3.8022626325237967, 2.8332105366651184, null, 3.254268358685542, 3.208796234417193, null, 3.254268358685542, 3.9249004000123118, null, 3.254268358685542, 3.420276467613236, null, 3.254268358685542, 2.8332105366651184, null, 3.8027893897937397, 2.8332105366651184, null, 3.519152268041867, 3.510124429706414, null, 3.519152268041867, 2.8332105366651184, null, 4.657298901737561, 5.733766476253037, null, 4.657298901737561, 4.4922493298171435, null, 4.657298901737561, 5.110762158425958, null, 4.657298901737561, 5.970819912904959, null, 4.657298901737561, 5.749986583263188, null, 4.657298901737561, 5.454571318618045, null, 4.657298901737561, 6.007190530820043, null, 4.657298901737561, 5.81226594101222, null, 4.657298901737561, 5.370659356837522, null, 4.657298901737561, 5.2020490764288585, null, 4.657298901737561, 5.484397745503745, null, 4.657298901737561, 3.6944523800971942, null, 4.4922493298171435, 3.420276467613236, null, 3.6944523800971942, 3.208796234417193, null, 3.6944523800971942, 3.420276467613236, null, 3.6944523800971942, 2.8332105366651184, null, 3.208796234417193, 3.1963035834923454, null, 3.208796234417193, 3.3853401917228347, null, 3.208796234417193, 2.4868459851054565, null, 3.208796234417193, 3.8083281207458306, null, 3.208796234417193, 2.9587941212440194, null, 3.208796234417193, 3.8266272384394444, null, 3.208796234417193, 2.8654266466586664, null, 3.208796234417193, 2.249570328708619, null, 3.208796234417193, 2.171203210577138, null, 3.208796234417193, 2.3775412776713254, null, 3.208796234417193, 2.7006574152048977, null, 3.208796234417193, 3.56073537829441, null, 3.208796234417193, 2.5298841442301514, null, 3.208796234417193, 3.9649981823647615, null, 3.1963035834923454, 3.420276467613236, null, 3.8266272384394444, 4.12879181756165, null, 3.8266272384394444, 2.8332105366651184, null, 2.8654266466586664, 3.420276467613236, null, 2.249570328708619, 3.420276467613236, null, 2.249570328708619, 2.8332105366651184, null, 2.3775412776713254, 3.420276467613236, null, 2.3775412776713254, 2.8332105366651184, null, 2.7006574152048977, 3.420276467613236, null, 2.7006574152048977, 2.8332105366651184, null, 3.56073537829441, 3.420276467613236, null, 2.5298841442301514, 3.420276467613236, null, 2.5298841442301514, 2.8332105366651184, null, 4.12879181756165, 5.03289236413866, null, 4.12879181756165, 4.710006002622615, null, 4.12879181756165, 4.73462005811762, null, 4.12879181756165, 5.169382855226595, null, 4.12879181756165, 5.29882050880895, null, 4.12879181756165, 5.3655004034220894, null, 4.12879181756165, 4.018470132428494, null, 4.12879181756165, 5.398415684456184, null, 4.12879181756165, 4.326972452741988, null, 4.12879181756165, 5.4718637743524425, null, 4.12879181756165, 4.930608733796384, null, 4.12879181756165, 5.16068232782081, null, 4.12879181756165, 4.683209494975483, null, 4.12879181756165, 4.198839975800029, null, 4.12879181756165, 5.203406368293517, null, 4.12879181756165, 4.270550537904401, null, 4.12879181756165, 5.50576081280487, null, 4.12879181756165, 4.981321463783935, null, 4.12879181756165, 4.782596581832069, null, 4.12879181756165, 4.461250452901905, null, 4.270550537904401, 3.510124429706414, null, 2.846843555583158, 3.0390348017696014, null, 8.409196687003794, 7.997598029947869, null, 8.409196687003794, 8.778977851861088, null, 8.409196687003794, 8.855773576487938, null, 7.997598029947869, 7.298796176344266, null, 7.997598029947869, 7.692229271007524, null, 4.002962422719911, 4.629702171609166, null, 1.8417680803781449, 1.1360232580232164, null, 3.420276467613236, 4.169822826666699, null, 3.420276467613236, 3.525351877269691, null, 3.420276467613236, 4.010735862535148, null, 4.377004938461889, 4.717923231605671, null, 4.377004938461889, 5.3654994623641175, null, 3.510124429706414, 3.029964199024005, null, 3.510124429706414, 2.5648786755152644, null, 3.510124429706414, 3.5275668511735736, null, 3.510124429706414, 2.7652527753497984, null, 3.510124429706414, 3.3536209873209417, null, 3.510124429706414, 4.069889678493677, null, 3.510124429706414, 3.2538758730292177, null, 3.510124429706414, 2.822691789305926, null, 3.510124429706414, 3.7812733404658756, null, 2.7652527753497984, 2.8332105366651184, null, 3.2538758730292177, 4.622905057695846, null, 3.2538758730292177, 2.8332105366651184, null, 2.8332105366651184, 1.4776801722357584, null, 2.8332105366651184, 1.6319712971473423, null, 2.8332105366651184, 3.1979723862340976, null, 2.8332105366651184, 2.7456448441874644, null, 2.8332105366651184, 2.6342118047724146, null, 2.8332105366651184, 1.797795426988805, null, 2.8332105366651184, 3.3904402911188907, null, 2.8332105366651184, 1.5883277679443095, null, 2.8332105366651184, 3.4206508621234626, null, 2.8332105366651184, 2.2012852735673287, null, 2.8332105366651184, 3.3489472688709636, null, 2.8332105366651184, 1.8359470688274344, null, 2.8332105366651184, 3.0726948978167568, null, 2.8332105366651184, 1.4852971086298161, null, 2.8332105366651184, 1.8086057270609355, null, 2.8332105366651184, 1.8702261302129797, null, 2.8332105366651184, 2.910458255743563, null, 2.8332105366651184, 2.4635622073327514, null, 2.8332105366651184, 1.5466306096309412, null, 2.8332105366651184, 2.1119634964217138, null, 2.8332105366651184, 2.8545908402582962, null, 2.8332105366651184, 2.43585331324565, null, 2.8332105366651184, 2.2100160008634604, null, 2.8332105366651184, 2.0739406723023515, null, 2.8332105366651184, 1.7246981731123288, null, 2.8332105366651184, 2.6110716660161253, null, 2.8332105366651184, 2.1640333702823775, null, 2.910458255743563, 2.788633064441895, null, 2.788633064441895, 3.27370146242922, null, 2.788633064441895, 2.2823985603184154, null, 2.788633064441895, 2.5890864165076763, null], &quot;mode&quot;: &quot;lines&quot;, &quot;line&quot;: {&quot;color&quot;: &quot;rgb(125,125,125)&quot;, &quot;width&quot;: 1}, &quot;hoverinfo&quot;: &quot;none&quot;}, {&quot;type&quot;: &quot;scatter3d&quot;, &quot;x&quot;: [-9.626346539046287, -8.623090039344206, -11.789026887203002, -12.104849309051929, -11.344169731143687, -11.530581670867702, -12.391884687522362, -11.076906334407322, -11.506312278445696, -12.425975578400028, -11.290763984354069, -12.867524518912452, -10.93047215202216, -12.057627306678896, -12.206349582370809, -12.106374962767179, -11.912901274828444, -13.05505218744675, -12.654912227236382, -10.862903456023018, -11.20167757592195, -10.601356521081202, -11.875494677481356, -11.557180849588473, -11.047210446932914, -12.457041091844786, -11.788077228349037, -12.630425258422282, -13.082173987396606, -11.688873492823502, -10.773228276891555, -12.885298270266277, -12.304393701025948, -10.585628047368564, -10.498614541999745, -12.727133968135385, -12.058441156506992, -12.196718991569822, -11.084536977088622, -11.583404202804841, -11.33623854004443, -12.821731140033085, -11.343684950856696, -11.077547533245024, -13.143703691875274, -11.154899339946104, -12.583841054519215, -11.363580515801306, -11.490466985630992, -12.90512599257553, -12.585107998676223, -12.615941539336857, -10.766155919305563, -11.680397113687437, -11.591330059016482, -12.555292120843372, -11.55207402374252, -10.617155788358387, -12.054777435893117, -11.179028067350838, -11.549078878381849, -12.224904798042097, -12.229462188236676, -8.219901681530164, -7.682464145165789, -7.673649341631782, -8.277630086068925, -7.081051725054351, -11.138154349312865, -10.796321847500408, -10.447780529690334, -11.040089544440615, -10.170515439130138, -10.882381210483814, -10.766401717945282, -10.985959065371647, -11.23057180241766, -11.148475612023322, -11.332788491280995, -10.630942014397295, -9.3067140404491, -9.799142568928206, -11.300217290220951, -10.062566845108101, -9.448112915041362, -6.791685867423961, -12.032512390853856, -12.637325364379437, -12.802924556349542, -13.401184986122892, -11.906881258851046, -11.973026033494978, -12.29030671730406, -12.160304083520177, -12.662347264607206, -12.803596347078745, -13.234330168387816, -13.09648408446182, -11.479199095794973, -8.240400616838228, -11.856669246239063, -13.16546109640478, -12.491834157022877, -12.7075197138608, -12.797429131803527, -12.717121881102418, -10.610614733918014, -13.047888319668871, -11.494933523446086, -12.700510501881626, -11.512543955710052, -11.463556039029827, -13.191756943968068, -11.490580917482493, -12.33640370047084, -11.893440087256714, -7.550110208953292, -7.266107655374866, -11.182955166122495, -10.31452879782927, -10.712081330726395, -10.290138287075145, -10.798216365701604, -10.568118647562892, -11.253322956817312, -10.41647662370631, -11.743850555961624, -10.276478912523183, -10.934288960718463, -12.232582270122295, -11.710101214776179, -11.610127977553239, -10.788397645011516, -12.10841554667447, -9.917701346887661, -11.370402996561253, -11.219060722097353, -11.996557960949907, -11.172471135670124, -5.639642898646767, -5.455246987888097, -8.920108649997871, -8.790295777780484, -9.954874619081334, -9.764266075769775, -8.615378446519872, -6.529006215135621, -7.047465528476751, -9.919752232792149, -9.035911564593286, -12.032050915546549, -12.704274338850142, -13.086399000923775, -13.278988028162084, -10.201088596355074, -8.92755812814514, -9.22420092188988, -7.025788821068154, -9.89496090050454, -8.6397455772732, -8.871473944796485, -8.53604719295397, -9.260080626057391, -9.033333505095914, -8.688567993017202, -9.341867946067223, -9.061732299610126, -8.847432446592192, -7.780962224114481, -7.835776677609554, -10.070910886072811, -10.576512776369576, -10.464186795405583, -10.299805490471993, -10.759348416148965, -9.258995180865297, -10.068371954906633, -9.355360988383884, -10.264203450596163, -10.13347126069284, -9.97664053001623, -9.451577501242996, -9.376681514821563, -9.776894892920417, -9.627650591140467, -10.357800904643193, -10.668595643696944, -9.659024044914831, -10.714447407286265, -9.50923145219351, -9.190480247307221, -10.317974953130273, -9.372486354694724, -9.154413612167595, -9.754518847561046, -10.620395644101233, -9.688378890618791, -9.916881028209863, -10.51648741996741, -10.178155602420341, -8.640422387982563, -7.854329332277808, -8.64517709085165, -8.408913813554543, -8.158319487237922, -7.402867263120122, -6.730280415936092], &quot;y&quot;: [-13.384902175698175, -12.629733158054055, -10.367272134905159, -9.373025498824862, -11.602573414368099, -10.88114676390846, -11.282547127264253, -9.302383691973516, -11.404520243490914, -10.62695859278491, -9.28079882257484, -9.621632864330127, -11.150209314365313, -9.696575060960466, -10.11250272866262, -11.031895450748728, -10.468883193294658, -9.910858511296668, -11.356117533386417, -10.993916503753278, -11.258743241720508, -10.776600662305324, -9.347500079787453, -11.357130021810509, -11.146655486374925, -10.87561234266761, -9.094855866597651, -10.441148935745423, -10.285384643949351, -9.28844382984708, -11.005719279973325, -10.317409387994424, -10.537784637072374, -10.759452353173621, -10.625938297198852, -11.164794083266093, -9.442860905057456, -10.462532515587387, -9.516070717988994, -9.339833039117377, -11.249128338639615, -11.242858373025474, -9.129240893616371, -11.21729624470927, -10.154085774620917, -9.769963266508876, -11.130362822000775, -10.069768421916248, -9.267431574158978, -9.847224316012172, -9.9007473544958, -9.378589568266378, -9.594881556332313, -10.199290088499765, -9.692918224146691, -9.522775498049793, -11.637528007907875, -10.997276050908807, -10.800295031444305, -11.146664773016516, -11.37613611803721, -9.563334699117284, -9.18123793411783, -13.28137384149981, -12.143133197738173, -11.594758410431783, -10.904396316988416, -12.372430504143095, -11.52399145378177, -12.487681283108099, -11.468780223660666, -12.844995416200627, -11.928239305224263, -12.129922884343516, -11.910271342067619, -11.64045105079954, -12.907450807681036, -13.005486237310796, -12.719091722890871, -12.987189285188052, -11.42414159485315, -12.697987945288622, -12.851658795816618, -12.947267232229764, -11.93539775542244, -11.6025703394729, -11.705984402431604, -12.017250596639014, -12.55931623382803, -11.55864506374902, -12.05193715280981, -12.548789159844082, -12.848756671747156, -11.54984318156282, -11.321814644274825, -12.541271842618238, -12.058027113026467, -11.319824884032721, -12.846235294833068, -11.685252631540795, -12.033634549867996, -12.318086916861514, -13.312271312499254, -12.885951953095834, -12.933348713964222, -13.094200533012826, -11.664003183655428, -12.421575827144602, -12.572742017656196, -12.60034221448301, -12.713627559064006, -12.970646905137492, -12.190618211284727, -12.8459691924404, -13.273278120476453, -11.747048543358076, -10.747022995682245, -10.963254510501423, -10.237970047589481, -9.799254033561693, -9.17991281986953, -9.463439596622951, -9.601732835053019, -10.071902956916626, -9.81004932228846, -9.039562040371914, -10.11628197404159, -9.215789584960353, -10.241839840247899, -9.682364149702508, -9.587219869355181, -9.112030110066755, -8.922290593714147, -9.985440530296804, -9.776579899076456, -10.287813224145465, -9.292883917512217, -9.342491177700241, -8.95556835077808, -9.91217140036119, -10.785613100802967, -12.090080787959831, -13.45217794954232, -12.368406502192045, -11.420437412434705, -11.596043443007156, -7.974627534527816, -7.493559050847265, -10.269115474302783, -9.655411435306217, -11.969929660478181, -13.05194393239898, -12.893252510653593, -12.38633705378811, -10.998978623567265, -10.075945686358592, -10.747176894427106, -12.92013424010904, -10.730610364970712, -10.291696313536455, -10.099922298663458, -10.55680473479271, -11.565391989675511, -9.577579989836575, -10.442954029877113, -11.721822848633614, -9.668929617072237, -9.89363843946089, -13.47949494712418, -13.03665021431799, -10.621643282129533, -11.428614262414452, -12.136823006694014, -12.011737979525229, -12.70331741287901, -12.541807517780502, -13.320155500000297, -12.619851763361956, -12.83105937905384, -13.363863941120874, -11.869174719671262, -12.787418919536725, -12.281634794385395, -13.141673916158268, -12.088587682787379, -13.48411252030969, -12.341421342114957, -11.7186417880566, -13.032537619431045, -13.13193042812604, -12.031828641708044, -12.391518184463603, -11.780396540916772, -12.29162843642722, -12.998742920307908, -13.29840207037762, -12.672598431629943, -12.423417083226456, -13.459764446973185, -13.133699659592155, -9.876285596621786, -12.030346616284882, -14.087566314670049, -15.210023253442833, -14.918884533634118, -14.195612879693275, -12.172527991722532], &quot;z&quot;: [8.406915134303027, 8.321056196313904, 2.7862268494721967, 2.1897873829300383, 2.4435107137308782, 3.983979497075568, 2.101345355890599, 2.251959271026674, 3.5981554041826316, 3.967761077915809, 3.2871192190418137, 3.086026265953982, 3.368954095564839, 1.8118077983205096, 1.637378118300458, 3.977208066496437, 1.4489353681642265, 3.1584841757923443, 2.661687581409254, 2.9047127387868854, 3.486271555012652, 3.1896334325336784, 3.5708707174453505, 3.4710707208746605, 3.096039548878412, 3.8251148584985017, 2.53042499027358, 1.7988605548417063, 2.469085036267669, 3.4746081891516614, 3.2365907151206073, 2.1011544833809106, 1.5725162069184329, 2.929683394183835, 3.020276910371866, 2.354101584910928, 3.6574002710402294, 3.746686484032972, 1.9690339449195369, 2.0693646056869612, 2.9525210936954833, 2.7623742689466044, 2.448260887389385, 3.664595587899626, 2.867902439182499, 1.726610879050419, 3.037522516520478, 1.5269732418518362, 3.3863710368751616, 2.53563332722097, 2.0063848003283535, 2.916418225650652, 3.2406558322764654, 1.4720138016963065, 1.7126046885244863, 2.406407677301235, 2.1959957126223304, 2.192237005542832, 4.083493374497236, 3.5603138022380967, 3.371341872222347, 3.7394749623187304, 2.690625849575399, 7.774401844510422, 7.612199437952266, 7.912687509149766, 8.24710336971647, 7.346108176883911, 4.563641416151821, 5.307051629224405, 3.797803253871395, 3.556358956763613, 5.216164686517435, 4.3579332799851365, 3.911356996045978, 4.039637767975737, 3.0268943641417683, 3.2836451814533043, 3.863389945760799, 5.026783072747423, 4.416656345060819, 3.8022626325237967, 3.254268358685542, 3.8027893897937397, 3.519152268041867, 7.022144284346507, 4.657298901737561, 5.733766476253037, 4.4922493298171435, 5.110762158425958, 5.970819912904959, 5.749986583263188, 5.454571318618045, 6.007190530820043, 5.81226594101222, 5.370659356837522, 5.2020490764288585, 5.484397745503745, 3.6944523800971942, 8.326383621643991, 3.208796234417193, 3.1963035834923454, 3.3853401917228347, 2.4868459851054565, 3.8083281207458306, 2.9587941212440194, 3.8266272384394444, 2.8654266466586664, 2.249570328708619, 2.171203210577138, 2.3775412776713254, 2.7006574152048977, 3.56073537829441, 2.5298841442301514, 3.9649981823647615, 3.9249004000123118, 7.715121531479632, 7.498458798812705, 4.12879181756165, 5.03289236413866, 4.710006002622615, 4.73462005811762, 5.169382855226595, 5.29882050880895, 5.3655004034220894, 4.018470132428494, 5.398415684456184, 4.326972452741988, 5.4718637743524425, 4.930608733796384, 5.16068232782081, 4.683209494975483, 4.198839975800029, 5.203406368293517, 4.270550537904401, 5.50576081280487, 4.981321463783935, 4.782596581832069, 4.461250452901905, 2.846843555583158, 3.0390348017696014, 8.409196687003794, 7.997598029947869, 8.778977851861088, 8.855773576487938, 8.393478383942588, 4.002962422719911, 4.629702171609166, 1.8417680803781449, 1.1360232580232164, 3.420276467613236, 4.169822826666699, 3.525351877269691, 4.010735862535148, 4.377004938461889, 4.717923231605671, 5.3654994623641175, 6.896515814777535, 3.510124429706414, 3.029964199024005, 2.5648786755152644, 3.5275668511735736, 2.7652527753497984, 3.3536209873209417, 4.069889678493677, 3.2538758730292177, 2.822691789305926, 3.7812733404658756, 7.298796176344266, 7.692229271007524, 3.0073224960306058, 4.622905057695846, 2.8332105366651184, 1.4776801722357584, 1.6319712971473423, 3.1979723862340976, 2.7456448441874644, 2.6342118047724146, 1.797795426988805, 3.3904402911188907, 1.5883277679443095, 3.4206508621234626, 2.2012852735673287, 3.3489472688709636, 1.8359470688274344, 3.0726948978167568, 1.4852971086298161, 1.8086057270609355, 1.8702261302129797, 2.910458255743563, 2.4635622073327514, 1.5466306096309412, 2.1119634964217138, 2.8545908402582962, 2.43585331324565, 2.2100160008634604, 2.0739406723023515, 1.7246981731123288, 2.6110716660161253, 2.1640333702823775, 8.31099214422144, 8.14041560527225, 2.788633064441895, 3.27370146242922, 2.2823985603184154, 2.5890864165076763, 6.791953066577848], &quot;mode&quot;: &quot;markers&quot;, &quot;name&quot;: &quot;id&quot;, &quot;marker&quot;: {&quot;symbol&quot;: &quot;dot&quot;, &quot;size&quot;: 6, &quot;color&quot;: [0, 0, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 2, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 2, 1, 3, 1, 2, 2, 2, 2, 1, 1, 1, 2, 1, 1, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 0, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 5, 0, 0, 0, 0, 0, 6, 6, 7, 7, 1, 1, 1, 1, 3, 3, 3, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 8, 8, 8, 8, 0], &quot;colorscale&quot;: &quot;jet&quot;, &quot;line&quot;: {&quot;color&quot;: &quot;rgb(50,50,50)&quot;, &quot;width&quot;: 0.5}}, &quot;text&quot;: [&quot;107390314089464367059&quot;, &quot;881671655258051035146&quot;, &quot;1233389043252499&quot;, &quot;10283525378491845191&quot;, &quot;107390779921855246818&quot;, &quot;1086981572312090011617&quot;, &quot;115044044582940921&quot;, &quot;1249477722457956361330761&quot;, &quot;1384376610695109&quot;, &quot;145525565209094733555&quot;, &quot;145681793759158032&quot;, &quot;163968061233600223957&quot;, &quot;2028899993182877&quot;, &quot;2127839523384307&quot;, &quot;2386415621182292&quot;, &quot;2530606345703860279&quot;, &quot;257543223401894838001&quot;, &quot;266960582943649471723172757&quot;, &quot;2714896453987119529&quot;, &quot;2769339656613617726&quot;, &quot;287579175882641311575046483&quot;, &quot;3245854804604706973&quot;, &quot;338410499546450240900&quot;, &quot;3447124557747859184260&quot;, &quot;3855351481683740335798572&quot;, &quot;39304186762868839&quot;, &quot;4298492203159176269875&quot;, &quot;4301136550690589929396&quot;, &quot;433399595179740261670&quot;, &quot;4414844611798249339907&quot;, &quot;45320675962115551717409&quot;, &quot;506787052078080114536701983&quot;, &quot;5281400113254610&quot;, &quot;5814888935293700784&quot;, &quot;608511589941733255&quot;, &quot;61167611229082062523518&quot;, &quot;68491187056009946118&quot;, &quot;6923923058651369578165989&quot;, &quot;6941463329596358138&quot;, &quot;7163197186020160141&quot;, &quot;73724786077037630408&quot;, &quot;751124102222117466944&quot;, &quot;78615867843346864629&quot;, &quot;7884137752250274052239&quot;, &quot;79585818303444110968&quot;, &quot;800144479592173916766&quot;, &quot;80349336169421988&quot;, &quot;8055523895430410679&quot;, &quot;838186216353081245256&quot;, &quot;8455016270614596837658&quot;, &quot;851609790514685725&quot;, &quot;87915092593279770&quot;, &quot;89133650676269120&quot;, &quot;89216436657391640579852&quot;, &quot;89581484482626810952203&quot;, &quot;904233120098182325&quot;, &quot;907207725749250015&quot;, &quot;943030342015307260&quot;, &quot;97655742718167942796&quot;, &quot;97719070483417404467&quot;, &quot;98358979031871086575049&quot;, &quot;983941574301233211&quot;, &quot;993353392655583448329&quot;, &quot;133138285789457424&quot;, &quot;283855936654569403808&quot;, &quot;1458750120725967&quot;, &quot;404311320381703363741&quot;, &quot;71088115930275803022&quot;, &quot;1476064963166939&quot;, &quot;10442832731745294&quot;, &quot;452888865737579701&quot;, &quot;6305792400331187&quot;, &quot;718562331285573064275004391&quot;, &quot;88403399729734752074&quot;, &quot;2025063591813922202&quot;, &quot;132299190096798356&quot;, &quot;2470904527532390293425251&quot;, &quot;35499681172105636439&quot;, &quot;363011877143005729&quot;, &quot;45298229635922789&quot;, &quot;59754127612522562683&quot;, &quot;6073400036153001737279&quot;, &quot;617620312645826848&quot;, &quot;711968840930526616&quot;, &quot;8937172285285735575349237&quot;, &quot;2531202467546391633&quot;, &quot;27176272267558810&quot;, &quot;120259343862440610287992&quot;, &quot;1497093313502851509&quot;, &quot;3006917380295658835530&quot;, &quot;41444879675354398&quot;, &quot;4230641497890905094&quot;, &quot;5166495359959328242494&quot;, &quot;5365687069468651490070301&quot;, &quot;635335285538222152&quot;, &quot;734324992130916854828&quot;, &quot;7642550270607759701&quot;, &quot;772097766066682613441&quot;, &quot;999862709345983078377&quot;, &quot;2769102527290438300&quot;, &quot;283856013587263053536&quot;, &quot;1011273940968628&quot;, &quot;1278615067970319289&quot;, &quot;15884768235770304&quot;, &quot;1975902149874653197434&quot;, &quot;22782526158988572500&quot;, &quot;2924082461818669552090&quot;, &quot;29344994910919632&quot;, &quot;36304561062308177&quot;, &quot;77917887095986388549&quot;, &quot;78784692438610920443&quot;, &quot;814836916406806121389650&quot;, &quot;82569342811467827992&quot;, &quot;8327703154723699&quot;, &quot;858362030407199&quot;, &quot;3084945558154715533&quot;, &quot;3447123749644086525218&quot;, &quot;3855351481619680098627387&quot;, &quot;404310840573463344833&quot;, &quot;10378442761540056&quot;, &quot;1260241801346034&quot;, &quot;14074973255980270980&quot;, &quot;14288725542900383949&quot;, &quot;1446973496853472361529&quot;, &quot;16383178044784339&quot;, &quot;2291295552970130526823598&quot;, &quot;2765478051303889&quot;, &quot;30917323086090400&quot;, &quot;3201191265109790693&quot;, &quot;38536705464527803237&quot;, &quot;4227048483022801308&quot;, &quot;4389497346671911&quot;, &quot;453987617850353814735&quot;, &quot;6514263801364585006355&quot;, &quot;72550697995274716536&quot;, &quot;8041475719895395066958&quot;, &quot;87972091143143492453745&quot;, &quot;93653882044410355&quot;, &quot;9419751607447152788&quot;, &quot;40640391318762427&quot;, &quot;26873548222363908&quot;, &quot;452861462656144026&quot;, &quot;1177509617868198&quot;, &quot;2025427802658813272&quot;, &quot;503269904186709&quot;, &quot;45320675643399993052802&quot;, &quot;5904719684090870835&quot;, &quot;7331763837220088417737&quot;, &quot;6249215414247843&quot;, &quot;971562311446239616&quot;, &quot;71088175830730851547&quot;, &quot;11375675026499262&quot;, &quot;5552011284710191190836996&quot;, &quot;60296517998098373106431&quot;, &quot;7331764363425278395108&quot;, &quot;126281184494455770762750&quot;, &quot;5904431245365196433&quot;, &quot;73724827004000442247&quot;, &quot;74456172382552590021&quot;, &quot;100557471929123735&quot;, &quot;122373692330176601&quot;, &quot;24674774269917595&quot;, &quot;545920175247779946&quot;, &quot;62498434695989471489716&quot;, &quot;6289615459628471366&quot;, &quot;8326387135471815145&quot;, &quot;87209538040040366&quot;, &quot;9981205440179039&quot;, &quot;79562233530552336&quot;, &quot;814836916766553954250551&quot;, &quot;822258312071282431206&quot;, &quot;8320442492951316958070&quot;, &quot;881672747320409102247&quot;, &quot;107289465777929342&quot;, &quot;107345454479692171114&quot;, &quot;169004433699914213001&quot;, &quot;182922190323843166850&quot;, &quot;25087151147718060910490&quot;, &quot;25423374624270017&quot;, &quot;305208562797689823&quot;, &quot;3206416539992701326259&quot;, &quot;34190343803779097948&quot;, &quot;3488640302356183463002&quot;, &quot;360216538761892754389&quot;, &quot;418183486086785814&quot;, &quot;439076211063355456034103673&quot;, &quot;5195695039749344869&quot;, &quot;52516347741603041905&quot;, &quot;5431205449117229191&quot;, &quot;56081606527331014991&quot;, &quot;63913826191559750751&quot;, &quot;6537317218273407654024&quot;, &quot;663614183149792523967&quot;, &quot;68764389047014620083&quot;, &quot;864573934707767961845&quot;, &quot;86574430130691834878&quot;, &quot;8661957543797475029370&quot;, &quot;88646416605656674170172&quot;, &quot;8921037644069293868440147&quot;, &quot;914052565562339&quot;, &quot;97654924811775968832&quot;, &quot;97718185856264270686&quot;, &quot;9828674548664846604&quot;, &quot;157311960990359211011&quot;, &quot;553245521094000813&quot;, &quot;97338992576679696065&quot;, &quot;98358979575368234193108&quot;], &quot;hoverinfo&quot;: &quot;text&quot;}], {&quot;title&quot;: &quot;Network of Communications Weighted by Connection (3D visualization)&quot;, &quot;width&quot;: 1000, &quot;height&quot;: 1000, &quot;showlegend&quot;: false, &quot;scene&quot;: {&quot;xaxis&quot;: {&quot;showbackground&quot;: false, &quot;showline&quot;: false, &quot;zeroline&quot;: false, &quot;showgrid&quot;: false, &quot;showticklabels&quot;: false, &quot;title&quot;: &quot;&quot;}, &quot;yaxis&quot;: {&quot;showbackground&quot;: false, &quot;showline&quot;: false, &quot;zeroline&quot;: false, &quot;showgrid&quot;: false, &quot;showticklabels&quot;: false, &quot;title&quot;: &quot;&quot;}, &quot;zaxis&quot;: {&quot;showbackground&quot;: false, &quot;showline&quot;: false, &quot;zeroline&quot;: false, &quot;showgrid&quot;: false, &quot;showticklabels&quot;: false, &quot;title&quot;: &quot;&quot;}}, &quot;margin&quot;: {&quot;t&quot;: 100}, &quot;hovermode&quot;: &quot;closest&quot;, &quot;annotations&quot;: [{&quot;showarrow&quot;: false, &quot;text&quot;: &quot;&quot;, &quot;xref&quot;: &quot;paper&quot;, &quot;yref&quot;: &quot;paper&quot;, &quot;x&quot;: 0, &quot;y&quot;: 0.1, &quot;xanchor&quot;: &quot;left&quot;, &quot;yanchor&quot;: &quot;bottom&quot;, &quot;font&quot;: {&quot;size&quot;: 14}}]}, {&quot;showLink&quot;: true, &quot;linkText&quot;: &quot;Export to plot.ly&quot;})&lt;/script&gt;</content><author><name>Siqi</name></author><category term="python" /><summary type="html">This short demo illustrates how to plot 3D interactive Visualization of Graph with plotly. The following packages are required: plotly, networkx, and igraph, which can be installed with pip.</summary></entry><entry><title type="html">Using Jupyter Notebook on Server</title><link href="http://localhost:4000/2017/11/06/Using-Jupyter-Notebook-Remotely/" rel="alternate" type="text/html" title="Using Jupyter Notebook on Server" /><published>2017-11-06T07:00:00-05:00</published><updated>2017-11-06T07:00:00-05:00</updated><id>http://localhost:4000/2017/11/06/Using-Jupyter-Notebook-Remotely</id><content type="html" xml:base="http://localhost:4000/2017/11/06/Using-Jupyter-Notebook-Remotely/">&lt;p&gt;When you are working on large data set or need extra computing power, you may need to do the work remotely on a server. For students, since you have access to AWS educate, you should definitely take advantage of it.&lt;/p&gt;

&lt;h2 id=&quot;steps&quot;&gt;Steps&lt;/h2&gt;

&lt;h3 id=&quot;on-the-server&quot;&gt;On the Server&lt;/h3&gt;

&lt;p&gt;First, you may want to set up a password for your notebook. For detailed instruction, you can look up &lt;a href=&quot;http://jupyter-notebook.readthedocs.io/en/stable/public_server.html#notebook-server-security&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you are looking for a quick set up, you can follow these steps:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jupyter notebook --generate-config
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Then you can create your password by&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jupyter notebook password
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;After setting up password, start a jupyter notebook in no browser mode, and specify a port you like. For example,&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jupyter notebook --no-browser --port&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;8889
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Of course, you can replace 8889 with any port you like, just make sure there is no clash.&lt;br /&gt;
If you plan to run the notebook for long period of time, you can run your notebook without hangup&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nohup jupyter notebook --no-browser --port=8889
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;In this way, your notebook will keep running even if you log out of the server.&lt;/p&gt;

&lt;h3 id=&quot;on-local-machine&quot;&gt;On Local Machine&lt;/h3&gt;
&lt;p&gt;Now you need to connect to your notebook from your local machine.&lt;br /&gt;
You need to create a ssh tunnel to your server and bind your notebook port to a specified local port. Continuing from the previous example, on your local machine,&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ssh &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;USER]@[SERVER] -L 8889:localhost:8888 -N
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;where [USER] is your user name, and [SERVER] is your server’s address.&lt;br /&gt;
Now you can launch jupyter notebook as usual, by typing ‘localhost:8888’ in your favorite browser.&lt;/p&gt;

&lt;h3 id=&quot;to-kill-the-jupyter-notebok-process&quot;&gt;To Kill the Jupyter Notebok Process&lt;/h3&gt;
&lt;p&gt;Since we launched jupyter notebook with &lt;code class=&quot;highlighter-rouge&quot;&gt;nohup&lt;/code&gt;, you can do the following to kill the jupyter notebook process.&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;netstat -tulpn
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Then &lt;code class=&quot;highlighter-rouge&quot;&gt;kill&lt;/code&gt; the pid with python.&lt;/p&gt;</content><author><name>Siqi</name></author><category term="jupyter" /><summary type="html">When you are working on large data set or need extra computing power, you may need to do the work remotely on a server. For students, since you have access to AWS educate, you should definitely take advantage of it.</summary></entry></feed>